

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (15 June 2023 19:40:59) as /home/clinux01/Escritorio/linux64/CuisUniversity-5832.image!


----End fileIn of /home/clinux01/Escritorio/2023-1c/09-TusLibros/Iteracion3/TusLibros-80.st----!

----End fileIn of /home/clinux01/Escritorio/linux64/Packages/System/Collections-CompactArrays.pck.st----!

----End fileIn of /home/clinux01/Escritorio/linux64/Packages/Features/Compression.pck.st----!

----End fileIn of /home/clinux01/Escritorio/linux64/Packages/Features/Sound.pck.st----!

----End fileIn of /home/clinux01/Escritorio/linux64/Packages/Features/Cryptography-DigitalSignatures.pck.st----!

----End fileIn of /home/clinux01/Escritorio/linux64/Packages/Features/Identities-UUID.pck.st----!

----End fileIn of /home/clinux01/Escritorio/linux64/Packages/System/Network-Kernel.pck.st----!

----End fileIn of /home/clinux01/Escritorio/linux64/WebClient.pck.st----!

!classRemoval: #StoreTestObjectsFactory stamp: 'vw&ic 6/15/2023 20:44:04'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!

!classRemoval: #ManualClock stamp: 'vw&ic 6/15/2023 20:44:05'!
Clock subclass: #ManualClock
	instanceVariableNames: 'now'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!

!classRemoval: #TusLibrosSystemFacadeTest stamp: 'vw&ic 6/15/2023 20:44:05'!
TestCase subclass: #TusLibrosSystemFacadeTest
	instanceVariableNames: 'testObjectsFactory clock systemFacade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!

!classRemoval: #CashierTest stamp: 'vw&ic 6/15/2023 20:44:05'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!

!classRemoval: #CartTest stamp: 'vw&ic 6/15/2023 20:44:05'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!

!classRemoval: #TusLibrosSystemFacade stamp: 'vw&ic 6/15/2023 20:44:06'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'validUsersAndPasswords catalog lastId merchantProcessor salesBook clock cartSessions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classRemoval: #Ticket stamp: 'vw&ic 6/15/2023 20:44:06'!
Object subclass: #Ticket
	instanceVariableNames: 'lineItems'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classRemoval: #Sale stamp: 'vw&ic 6/15/2023 20:44:06'!
Object subclass: #Sale
	instanceVariableNames: 'customer ticket'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classRemoval: #MerchantProcessor stamp: 'vw&ic 6/15/2023 20:44:06'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classRemoval: #LineItem stamp: 'vw&ic 6/15/2023 20:44:06'!
Object subclass: #LineItem
	instanceVariableNames: 'item quantity total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classRemoval: #CreditCard stamp: 'vw&ic 6/15/2023 20:44:06'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classRemoval: #Clock stamp: 'vw&ic 6/15/2023 20:44:07'!
Object subclass: #Clock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classRemoval: #Cashier stamp: 'vw&ic 6/15/2023 20:44:07'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard owner ticket'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classRemoval: #CartSession stamp: 'vw&ic 6/15/2023 20:44:07'!
Object subclass: #CartSession
	instanceVariableNames: 'owner cart lastUsedTime systemFacade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classRemoval: #Cart stamp: 'vw&ic 6/15/2023 20:44:07'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

----End fileIn of /home/clinux01/Escritorio/linux64/TusLibrosREST Ejercicio it4.st----!

----End fileIn of /home/clinux01/Escritorio/linux64/TusLibros-Model Ejercicio it4.st----!

----End fileIn of /home/clinux01/Escritorio/linux64/TusLibros-Tests Ejercicio it4.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsIsNotValid stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsIsNotValid stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeDigitsOnly stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #CreditCardTest #test04NameCanNotBeEmpty stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #CreditCardTest #test05IsExpiredOnNextExpirationMonth stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #CreditCardTest #test06IsNotExpiredOnExpirationMonth stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #CreditCardTest #test07CanGetCreditCardInfoFromIt stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 20:45:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 20:45:24'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 20:45:26'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'vw&ic 6/15/2023 20:46:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'vw&ic 6/15/2023 20:46:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'vw&ic 6/15/2023 20:46:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'vw&ic 6/15/2023 20:46:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'vw&ic 6/15/2023 20:46:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'vw&ic 6/15/2023 20:46:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'vw&ic 6/15/2023 20:46:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'vw&ic 6/15/2023 20:46:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'vw&ic 6/15/2023 20:46:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'vw&ic 6/15/2023 20:46:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'vw&ic 6/15/2023 20:46:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'vw&ic 6/15/2023 20:46:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'vw&ic 6/15/2023 20:46:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'vw&ic 6/15/2023 20:46:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'vw&ic 6/15/2023 20:46:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'vw&ic 6/15/2023 20:46:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 20:46:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 20:46:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 20:46:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 20:46:12'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 20:46:14'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'vw&ic 6/15/2023 20:47:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'vw&ic 6/15/2023 20:47:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 20:47:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'vw&ic 6/15/2023 20:47:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'vw&ic 6/15/2023 20:47:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'vw&ic 6/15/2023 20:47:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'vw&ic 6/15/2023 20:47:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'vw&ic 6/15/2023 20:47:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 20:47:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'vw&ic 6/15/2023 20:48:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'vw&ic 6/15/2023 20:48:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'vw&ic 6/15/2023 20:48:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 20:48:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 20:48:56'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 20:48:58'!
FAILURE!
!TusLibrosSystemFacadeTest methodsFor: 'tests - performance' stamp: 'vw&ic 6/15/2023 20:49:50' prior: 50664952!
test20BookPerformanceShouldNotTakeTooLong

	| cartId bookPerformance quantity total |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade 
		checkOutCartIdentifiedAs: cartId 
		withCreditCardNumbered: testObjectsFactory validCreditCardNumber 
		ownedBy: testObjectsFactory validOwnerName 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.
		
	cartId := systemFacade createCartFor: self anotherValidUser authenticatedWith: self anotherValidUserPassword.
	systemFacade add: 5 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade 
		checkOutCartIdentifiedAs: cartId 
		withCreditCardNumbered: testObjectsFactory validCreditCardNumber 
		ownedBy: testObjectsFactory validOwnerName 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.
		
	"self should: [bookPerformance := systemFacade bookPerformance: self validBook ] 
		notTakeMoreThanMilliseconds: 1100.	"

	quantity := bookPerformance at: 'quantity'.
	total := bookPerformance at: 'total'.
	self assert: 7 equals: quantity.
	self assert: (testObjectsFactory itemSellByTheStorePrice * 7) equals: total.
	self assert: 
		self validBook,' was selled ',quantity asString, ' times and raised a total amount of money equal to: ', total asString
		equals: (bookPerformance at: 'summary')
	! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 20:49:56'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 20:49:58'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 20:49:58'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'tests - performance' stamp: 'vw&ic 6/15/2023 20:50:12' prior: 50665959!
test20BookPerformanceShouldNotTakeTooLong

	| cartId bookPerformance quantity total |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade 
		checkOutCartIdentifiedAs: cartId 
		withCreditCardNumbered: testObjectsFactory validCreditCardNumber 
		ownedBy: testObjectsFactory validOwnerName 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.
		
	cartId := systemFacade createCartFor: self anotherValidUser authenticatedWith: self anotherValidUserPassword.
	systemFacade add: 5 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade 
		checkOutCartIdentifiedAs: cartId 
		withCreditCardNumbered: testObjectsFactory validCreditCardNumber 
		ownedBy: testObjectsFactory validOwnerName 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.
		
	self should: [bookPerformance := systemFacade bookPerformance: self validBook ] 
		notTakeMoreThanMilliseconds: 11000.	

	quantity := bookPerformance at: 'quantity'.
	total := bookPerformance at: 'total'.
	self assert: 7 equals: quantity.
	self assert: (testObjectsFactory itemSellByTheStorePrice * 7) equals: total.
	self assert: 
		self validBook,' was selled ',quantity asString, ' times and raised a total amount of money equal to: ', total asString
		equals: (bookPerformance at: 'summary')
	! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 20:50:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'vw&ic 6/15/2023 20:50:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'vw&ic 6/15/2023 20:50:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'vw&ic 6/15/2023 20:50:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'vw&ic 6/15/2023 20:50:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'vw&ic 6/15/2023 20:50:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'vw&ic 6/15/2023 20:50:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'vw&ic 6/15/2023 20:50:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'vw&ic 6/15/2023 20:50:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'vw&ic 6/15/2023 20:50:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'vw&ic 6/15/2023 20:50:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'vw&ic 6/15/2023 20:50:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'vw&ic 6/15/2023 20:50:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'vw&ic 6/15/2023 20:50:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'vw&ic 6/15/2023 20:50:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'vw&ic 6/15/2023 20:50:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'vw&ic 6/15/2023 20:50:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 20:50:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 20:50:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 20:50:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 20:50:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 20:50:19'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 20:50:21'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 20:50:28'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests - performance' stamp: 'vw&ic 6/15/2023 20:50:35' prior: 50666018!
test20BookPerformanceShouldNotTakeTooLong

	| cartId bookPerformance quantity total |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade 
		checkOutCartIdentifiedAs: cartId 
		withCreditCardNumbered: testObjectsFactory validCreditCardNumber 
		ownedBy: testObjectsFactory validOwnerName 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.
		
	cartId := systemFacade createCartFor: self anotherValidUser authenticatedWith: self anotherValidUserPassword.
	systemFacade add: 5 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade 
		checkOutCartIdentifiedAs: cartId 
		withCreditCardNumbered: testObjectsFactory validCreditCardNumber 
		ownedBy: testObjectsFactory validOwnerName 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.
		
	self should: [bookPerformance := systemFacade bookPerformance: self validBook ] 
		notTakeMoreThanMilliseconds: 1100.	

	quantity := bookPerformance at: 'quantity'.
	total := bookPerformance at: 'total'.
	self assert: 7 equals: quantity.
	self assert: (testObjectsFactory itemSellByTheStorePrice * 7) equals: total.
	self assert: 
		self validBook,' was selled ',quantity asString, ' times and raised a total amount of money equal to: ', total asString
		equals: (bookPerformance at: 'summary')
	! !

lineItems first!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:00:06' prior: 50664357!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |

	bookPerformance := Dictionary new.
	
	totalSales := [self totalSalesOf: anItem.] fork.
	totalMoney := [self totalMoneyRaisedBy: anItem] fork.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'vw&ic 6/15/2023 21:00:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'vw&ic 6/15/2023 21:00:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:00:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'vw&ic 6/15/2023 21:00:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'vw&ic 6/15/2023 21:00:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'vw&ic 6/15/2023 21:00:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'vw&ic 6/15/2023 21:00:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'vw&ic 6/15/2023 21:00:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'vw&ic 6/15/2023 21:00:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'vw&ic 6/15/2023 21:00:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'vw&ic 6/15/2023 21:00:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'vw&ic 6/15/2023 21:00:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'vw&ic 6/15/2023 21:00:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'vw&ic 6/15/2023 21:00:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'vw&ic 6/15/2023 21:00:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:00:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:00:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:00:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:00:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:00:12'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:00:14'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:00:18'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:00:18'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:00:22'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:00:22'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:01:48' prior: 50666205!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |

	bookPerformance := Dictionary new.
	
	[totalSales := self totalSalesOf: anItem.] fork.
	[totalMoney :=  self totalMoneyRaisedBy: anItem] fork.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:01:58'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:01:58'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:02:45' prior: 50666321!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |

	bookPerformance := Dictionary new.
	
	[totalSales := self totalSalesOf: anItem.] forkAndWait .
	[totalMoney :=  self totalMoneyRaisedBy: anItem] forkAndWait.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:03:12'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:03:14'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:03:18' prior: 50666348!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |

	bookPerformance := Dictionary new.
	
	[totalSales := self totalSalesOf: anItem.] fork .
	[totalMoney :=  self totalMoneyRaisedBy: anItem] forkAndWait.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:03:22'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:04:33' prior: 50666375!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |

	bookPerformance := Dictionary new.
	
	[[totalSales := self totalSalesOf: anItem.] fork .
	[totalMoney :=  self totalMoneyRaisedBy: anItem] fork] forkAndWait.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:04:50'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:04:50'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:05:12' prior: 50666398!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |

	bookPerformance := Dictionary new.
	
	 [totalSales := self totalSalesOf: anItem.] fork .
	[totalMoney :=  self totalMoneyRaisedBy: anItem] forkAndWait.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:05:17'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:05:31' prior: 50666425!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |

	bookPerformance := Dictionary new.
	
	[totalSales := self totalSalesOf: anItem.] fork .
	[totalMoney :=  self totalMoneyRaisedBy: anItem] forkAndWait.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:06:34' prior: 50664398!
storePerformance

	| totalMoney totalSales performance |
	
	performance := Dictionary new.
	
	[totalSales := self totalSales.] fork.
	[totalMoney := self totalMoneyRaised.] forkAndWait.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'vw&ic 6/15/2023 21:06:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'vw&ic 6/15/2023 21:06:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:06:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'vw&ic 6/15/2023 21:06:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'vw&ic 6/15/2023 21:06:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'vw&ic 6/15/2023 21:06:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'vw&ic 6/15/2023 21:06:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'vw&ic 6/15/2023 21:06:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'vw&ic 6/15/2023 21:06:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'vw&ic 6/15/2023 21:06:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'vw&ic 6/15/2023 21:06:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'vw&ic 6/15/2023 21:06:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'vw&ic 6/15/2023 21:06:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'vw&ic 6/15/2023 21:06:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'vw&ic 6/15/2023 21:06:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:06:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:06:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:06:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:06:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:06:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:06:37'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:10:20'!
totalSumOfSalesssssssssss: anItem

	^ salesBook sum: [:aSale | | quantityPerItem | 
		quantityPerItem := 0.
		aSale lineItemsDo: [:aLineItem | (aLineItem item = anItem) ifTrue: [quantityPerItem := quantityPerItem + aLineItem quantity]].
		quantityPerItem]! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:10:20' prior: 50664442!
totalSalesOf: anItem
	
	(Delay forSeconds: 1) wait.

	^self totalSumOfSalesssssssssss: anItem.

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:11:27'!
totalSumOfSalesssssssssss: anItem withCondition: aConditionToSum 

	^ salesBook sum: [:aSale | | quantityPerItem | 
		quantityPerItem := 0.
		aSale lineItemsDo: [:aLineItem | (aLineItem item = anItem) ifTrue: [quantityPerItem := quantityPerItem + aLineItem quantity]].
		quantityPerItem]! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'vw&ic 6/15/2023 21:11:27' prior: 50666578!
totalSalesOf: anItem
	
	(Delay forSeconds: 1) wait.

	^self totalSumOfSalesssssssssss: anItem withCondition: (aLineItem item = anItem).

! !

!methodRemoval: TusLibrosSystemFacade #totalSumOfSalesssssssssss: stamp: 'vw&ic 6/15/2023 21:11:27'!
totalSumOfSalesssssssssss: anItem

	^ salesBook sum: [:aSale | | quantityPerItem | 
		quantityPerItem := 0.
		aSale lineItemsDo: [:aLineItem | (aLineItem item = anItem) ifTrue: [quantityPerItem := quantityPerItem + aLineItem quantity]].
		quantityPerItem]!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:12:04' prior: 50666597!
totalSalesOf: anItem
	
	(Delay forSeconds: 1) wait.

	^self totalSumOfSalesssssssssss: anItem withCondition: [:aLineItem | aLineItem item = anItem].

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:12:19'!
totalSumOfSalesssssssssss: anItem withConditionBlock: aConditionToSum 

	^ salesBook sum: [:aSale | | quantityPerItem | 
		quantityPerItem := 0.
		aSale lineItemsDo: [:aLineItem | (aLineItem item = anItem) ifTrue: [quantityPerItem := quantityPerItem + aLineItem quantity]].
		quantityPerItem]! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'vw&ic 6/15/2023 21:12:19' prior: 50666616!
totalSalesOf: anItem
	
	(Delay forSeconds: 1) wait.

	^self totalSumOfSalesssssssssss: anItem withConditionBlock: [:aLineItem | aLineItem item = anItem].

! !

!methodRemoval: TusLibrosSystemFacade #totalSumOfSalesssssssssss:withCondition: stamp: 'vw&ic 6/15/2023 21:12:19'!
totalSumOfSalesssssssssss: anItem withCondition: aConditionToSum 

	^ salesBook sum: [:aSale | | quantityPerItem | 
		quantityPerItem := 0.
		aSale lineItemsDo: [:aLineItem | (aLineItem item = anItem) ifTrue: [quantityPerItem := quantityPerItem + aLineItem quantity]].
		quantityPerItem]!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:13:43' prior: 50666624!
totalSumOfSalesssssssssss: anItem withConditionBlock: aConditionToSum 

	^ salesBook sum: [:aSale | | quantity | 
		quantity := 0.
		aSale lineItemsDo: [:aLineItem | (aConditionToSum value: aLineItem) 
						ifTrue: [quantity := quantity + aLineItem quantity]].
						quantity]! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:14:13'!
withConditionBlock: aConditionToSum 

	^ salesBook sum: [:aSale | | quantity | 
		quantity := 0.
		aSale lineItemsDo: [:aLineItem | (aConditionToSum value: aLineItem) 
						ifTrue: [quantity := quantity + aLineItem quantity]].
						quantity]! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'vw&ic 6/15/2023 21:14:13' prior: 50666637!
totalSalesOf: anItem
	
	(Delay forSeconds: 1) wait.

	^self withConditionBlock: [:aLineItem | aLineItem item = anItem].

! !

!methodRemoval: TusLibrosSystemFacade #totalSumOfSalesssssssssss:withConditionBlock: stamp: 'vw&ic 6/15/2023 21:14:13'!
totalSumOfSalesssssssssss: anItem withConditionBlock: aConditionToSum 

	^ salesBook sum: [:aSale | | quantity | 
		quantity := 0.
		aSale lineItemsDo: [:aLineItem | (aConditionToSum value: aLineItem) 
						ifTrue: [quantity := quantity + aLineItem quantity]].
						quantity]!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:14:33'!
totalSalesWithCondition: aConditionToSum 

	^ salesBook sum: [:aSale | | quantity | 
		quantity := 0.
		aSale lineItemsDo: [:aLineItem | (aConditionToSum value: aLineItem) 
						ifTrue: [quantity := quantity + aLineItem quantity]].
						quantity]! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'vw&ic 6/15/2023 21:14:33' prior: 50666682!
totalSalesOf: anItem
	
	(Delay forSeconds: 1) wait.

	^self totalSalesWithCondition: [:aLineItem | aLineItem item = anItem].

! !

!methodRemoval: TusLibrosSystemFacade #withConditionBlock: stamp: 'vw&ic 6/15/2023 21:14:33'!
withConditionBlock: aConditionToSum 

	^ salesBook sum: [:aSale | | quantity | 
		quantity := 0.
		aSale lineItemsDo: [:aLineItem | (aConditionToSum value: aLineItem) 
						ifTrue: [quantity := quantity + aLineItem quantity]].
						quantity]!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:14:55' prior: 50664432!
totalSales
	
	(Delay forSeconds: 1) wait.

	^self totalSalesWithCondition: [:aLineItem | true].
	
! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'vw&ic 6/15/2023 21:14:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'vw&ic 6/15/2023 21:14:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:14:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'vw&ic 6/15/2023 21:14:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'vw&ic 6/15/2023 21:14:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'vw&ic 6/15/2023 21:14:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'vw&ic 6/15/2023 21:14:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'vw&ic 6/15/2023 21:14:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'vw&ic 6/15/2023 21:14:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'vw&ic 6/15/2023 21:14:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'vw&ic 6/15/2023 21:14:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'vw&ic 6/15/2023 21:14:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'vw&ic 6/15/2023 21:14:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'vw&ic 6/15/2023 21:14:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'vw&ic 6/15/2023 21:14:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:14:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:14:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:14:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:14:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:14:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:14:58'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:15:29' prior: 50664421!
totalMoneyRaisedBy: anItem
	
	(Delay forSeconds: 1) wait.

	^salesBook sum: [:aSale | | total |
		total :=0.
		aSale lineItemsDo: [:aLineItem | (aLineItem item = anItem) ifTrue: [total := total + aLineItem total]].
		total].
	
	! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:15:43'!
asdfgh: anItem

	^ salesBook sum: [:aSale | | total |
		total :=0.
		aSale lineItemsDo: [:aLineItem | (aLineItem item = anItem) ifTrue: [total := total + aLineItem total]].
		total]! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:15:43' prior: 50666819!
totalMoneyRaisedBy: anItem
	
	(Delay forSeconds: 1) wait.

	^self asdfgh: anItem.
	
	! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:17:08'!
asdfgh: anItem totalMoneyRaisedWithCondition: totalMoneyRaisedWithCondition 

	^ salesBook sum: [:aSale | | total |
		total :=0.
		aSale lineItemsDo: [:aLineItem | (aLineItem item = anItem) ifTrue: [total := total + aLineItem total]].
		total]! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'vw&ic 6/15/2023 21:17:08' prior: 50666838!
totalMoneyRaisedBy: anItem
	
	(Delay forSeconds: 1) wait.

	^self asdfgh: anItem totalMoneyRaisedWithCondition: [:aLineItem | aLineItem item = anItem].
	
	! !

!methodRemoval: TusLibrosSystemFacade #asdfgh: stamp: 'vw&ic 6/15/2023 21:17:08'!
asdfgh: anItem

	^ salesBook sum: [:aSale | | total |
		total :=0.
		aSale lineItemsDo: [:aLineItem | (aLineItem item = anItem) ifTrue: [total := total + aLineItem total]].
		total]!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:18:04' prior: 50666844!
asdfgh: anItem totalMoneyRaisedWithCondition: aConditionBlock 

	^ salesBook sum: [:aSale | | total |
		total :=0.
		aSale lineItemsDo: [:aLineItem | (aConditionBlock value: aLineItem) ifTrue: [total := total + aLineItem total]].
		total]! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:18:23' prior: 50666873!
asdfgh: anItem totalMoneyRaisedWithCondition: aConditionBlock 

	^ salesBook sum: [:aSale | | total |
		total :=0.
		aSale lineItemsDo: [:aLineItem | (aConditionBlock value: aLineItem) 
						ifTrue: [total := total + aLineItem total]].
		total]! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'vw&ic 6/15/2023 21:18:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'vw&ic 6/15/2023 21:18:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:18:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'vw&ic 6/15/2023 21:18:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'vw&ic 6/15/2023 21:18:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'vw&ic 6/15/2023 21:18:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'vw&ic 6/15/2023 21:18:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'vw&ic 6/15/2023 21:18:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'vw&ic 6/15/2023 21:18:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'vw&ic 6/15/2023 21:18:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'vw&ic 6/15/2023 21:18:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'vw&ic 6/15/2023 21:18:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'vw&ic 6/15/2023 21:18:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'vw&ic 6/15/2023 21:18:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'vw&ic 6/15/2023 21:18:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:18:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:18:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:18:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:18:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:18:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:18:26'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:21:11' prior: 50666884!
asdfgh: anItem totalMoneyRaisedWithCondition: aConditionBlock 

	^salesBook sum: [:aSale | | total |
		total :=0.
		aSale lineItemsDo: [:aLineItem | (aConditionBlock value: aLineItem) 
						ifTrue: [total := total + aLineItem total]].
		total]! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:21:23'!
totalMoneyRaisedWithCondition: aConditionBlock 

	^salesBook sum: [:aSale | | total |
		total :=0.
		aSale lineItemsDo: [:aLineItem | (aConditionBlock value: aLineItem) 
						ifTrue: [total := total + aLineItem total]].
		total]! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'vw&ic 6/15/2023 21:21:23' prior: 50666856!
totalMoneyRaisedBy: anItem
	
	(Delay forSeconds: 1) wait.

	^self totalMoneyRaisedWithCondition: [:aLineItem | aLineItem item = anItem].
	
	! !

!methodRemoval: TusLibrosSystemFacade #asdfgh:totalMoneyRaisedWithCondition: stamp: 'vw&ic 6/15/2023 21:21:23'!
asdfgh: anItem totalMoneyRaisedWithCondition: aConditionBlock 

	^salesBook sum: [:aSale | | total |
		total :=0.
		aSale lineItemsDo: [:aLineItem | (aConditionBlock value: aLineItem) 
						ifTrue: [total := total + aLineItem total]].
		total]!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:21:44' prior: 50664415!
totalMoneyRaised
	
	(Delay forSeconds: 1) wait.
	
	^self totalMoneyRaisedWithCondition: [:aLineItem | true].
	! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'vw&ic 6/15/2023 21:21:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'vw&ic 6/15/2023 21:21:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:21:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'vw&ic 6/15/2023 21:21:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'vw&ic 6/15/2023 21:21:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'vw&ic 6/15/2023 21:21:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'vw&ic 6/15/2023 21:21:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'vw&ic 6/15/2023 21:21:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'vw&ic 6/15/2023 21:21:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'vw&ic 6/15/2023 21:21:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'vw&ic 6/15/2023 21:21:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'vw&ic 6/15/2023 21:21:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'vw&ic 6/15/2023 21:21:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'vw&ic 6/15/2023 21:21:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'vw&ic 6/15/2023 21:21:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:21:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:21:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:21:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:21:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:21:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:21:47'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:31:10' prior: 50666467!
storePerformance

	| totalMoney totalSales performance semaphore|
	
	performance := Dictionary new.
	
	semaphore := Semaphore new.
	[[totalSales := self totalSales.] ensure: [semaphore signal]] fork.
	[[totalMoney := self totalMoneyRaised.] ensure: [semaphore signal]] fork.
	semaphore wait.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'vw&ic 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'vw&ic 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'vw&ic 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'vw&ic 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'vw&ic 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'vw&ic 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'vw&ic 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'vw&ic 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'vw&ic 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'vw&ic 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'vw&ic 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'vw&ic 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'vw&ic 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'vw&ic 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:31:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:31:15'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:31:34' prior: 50666731!
totalSales
	
	(Delay forSeconds: 1.2) wait.

	^self totalSalesWithCondition: [:aLineItem | true].
	
! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'vw&ic 6/15/2023 21:31:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'vw&ic 6/15/2023 21:31:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:31:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'vw&ic 6/15/2023 21:31:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'vw&ic 6/15/2023 21:31:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'vw&ic 6/15/2023 21:31:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'vw&ic 6/15/2023 21:31:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'vw&ic 6/15/2023 21:31:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'vw&ic 6/15/2023 21:31:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'vw&ic 6/15/2023 21:31:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'vw&ic 6/15/2023 21:31:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'vw&ic 6/15/2023 21:31:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'vw&ic 6/15/2023 21:31:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'vw&ic 6/15/2023 21:31:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'vw&ic 6/15/2023 21:31:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:31:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:31:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:31:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:31:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:31:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:31:38'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:31:39'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:31:48' prior: 50667209!
totalSales
	
	(Delay forSeconds: 1.02) wait.

	^self totalSalesWithCondition: [:aLineItem | true].
	
! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'vw&ic 6/15/2023 21:31:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'vw&ic 6/15/2023 21:31:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:31:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'vw&ic 6/15/2023 21:31:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'vw&ic 6/15/2023 21:31:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'vw&ic 6/15/2023 21:31:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'vw&ic 6/15/2023 21:31:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'vw&ic 6/15/2023 21:31:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'vw&ic 6/15/2023 21:31:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'vw&ic 6/15/2023 21:31:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'vw&ic 6/15/2023 21:31:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'vw&ic 6/15/2023 21:31:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'vw&ic 6/15/2023 21:31:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'vw&ic 6/15/2023 21:31:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'vw&ic 6/15/2023 21:31:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:31:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:31:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:31:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:31:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:31:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:31:51'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:31:52'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:32:06' prior: 50667106!
storePerformance

	| totalMoney totalSales performance semaphore|
	
	performance := Dictionary new.
	
	semaphore := Semaphore new.
	[[totalSales := self totalSales.] ensure: [semaphore signal]] fork.
	[[totalMoney := self totalMoneyRaised.] ensure: [semaphore signal]] fork.
	semaphore wait.
	semaphore wait.	
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'vw&ic 6/15/2023 21:32:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'vw&ic 6/15/2023 21:32:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:32:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'vw&ic 6/15/2023 21:32:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'vw&ic 6/15/2023 21:32:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'vw&ic 6/15/2023 21:32:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'vw&ic 6/15/2023 21:32:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'vw&ic 6/15/2023 21:32:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'vw&ic 6/15/2023 21:32:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'vw&ic 6/15/2023 21:32:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'vw&ic 6/15/2023 21:32:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'vw&ic 6/15/2023 21:32:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'vw&ic 6/15/2023 21:32:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'vw&ic 6/15/2023 21:32:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'vw&ic 6/15/2023 21:32:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:32:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:32:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:32:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:32:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:32:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:32:09'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:32:13' prior: 50667301!
totalSales
	
	(Delay forSeconds: 1) wait.

	^self totalSalesWithCondition: [:aLineItem | true].
	
! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:39:01' prior: 50667393!
storePerformance

	| totalMoney totalSales performance semaphore blocksToForkAndKnifeAndSpoooooooooon| 
	
	performance := Dictionary new.
	blocksToForkAndKnifeAndSpoooooooooon := OrderedCollection with: [totalSales := self totalSales.] 
														 with: [totalMoney := self totalMoneyRaised.].
	
	semaphore := Semaphore new.
	blocksToForkAndKnifeAndSpoooooooooon do: [:aBlockDeChocolate | [aBlockDeChocolate ensure: [semaphore signal]] fork. 
															semaphore wait.].
	
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'vw&ic 6/15/2023 21:39:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'vw&ic 6/15/2023 21:39:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:39:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'vw&ic 6/15/2023 21:39:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'vw&ic 6/15/2023 21:39:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'vw&ic 6/15/2023 21:39:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'vw&ic 6/15/2023 21:39:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'vw&ic 6/15/2023 21:39:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'vw&ic 6/15/2023 21:39:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'vw&ic 6/15/2023 21:39:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'vw&ic 6/15/2023 21:39:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'vw&ic 6/15/2023 21:39:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'vw&ic 6/15/2023 21:39:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'vw&ic 6/15/2023 21:39:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'vw&ic 6/15/2023 21:39:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:39:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:39:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:39:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:39:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:39:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:39:05'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:39:07'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:39:47' prior: 50667503!
storePerformance

	| totalMoney totalSales performance semaphore blocksToForkAndKnifeAndSpoooooooooon| 
	
	performance := Dictionary new.
	blocksToForkAndKnifeAndSpoooooooooon := OrderedCollection with: [totalSales := self totalSales.] 
														 with: [totalMoney := self totalMoneyRaised.].
	
	semaphore := Semaphore new.
	blocksToForkAndKnifeAndSpoooooooooon do: [:aBlockDeChocolate | [aBlockDeChocolate ensure: [semaphore signal]] fork. ].
	blocksToForkAndKnifeAndSpoooooooooon do: [:aBlockDeChocolate | semaphore wait ].
	
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:39:51' prior: 50667615!
storePerformance

	| totalMoney totalSales performance semaphore blocksToForkAndKnifeAndSpoooooooooon| 
	
	performance := Dictionary new.
	blocksToForkAndKnifeAndSpoooooooooon := OrderedCollection with: [totalSales := self totalSales.] 
														 with: [totalMoney := self totalMoneyRaised.].
	
	semaphore := Semaphore new.
	blocksToForkAndKnifeAndSpoooooooooon do: [:aBlockDeChocolate | [aBlockDeChocolate ensure: [semaphore signal]] fork. ].
	blocksToForkAndKnifeAndSpoooooooooon do: [:aBlockDeChocolate | semaphore wait. ].
	
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'vw&ic 6/15/2023 21:39:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'vw&ic 6/15/2023 21:39:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:39:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'vw&ic 6/15/2023 21:39:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'vw&ic 6/15/2023 21:39:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'vw&ic 6/15/2023 21:39:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'vw&ic 6/15/2023 21:39:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'vw&ic 6/15/2023 21:39:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'vw&ic 6/15/2023 21:39:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'vw&ic 6/15/2023 21:39:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'vw&ic 6/15/2023 21:39:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'vw&ic 6/15/2023 21:39:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'vw&ic 6/15/2023 21:39:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'vw&ic 6/15/2023 21:39:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'vw&ic 6/15/2023 21:39:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:39:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:39:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:39:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:39:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:39:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:39:54'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:42:33'!
waitForConcurrentBlocksToFinishExcution: aListOfBlocks

	| semaphore |
	
	semaphore := Semaphore new.
	aListOfBlocks do: [:aBlock | [aBlock ensure: [semaphore signal]] fork. ].
	aListOfBlocks length timesRepeat: [:aBlock | semaphore wait. ].

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'vw&ic 6/15/2023 21:42:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'vw&ic 6/15/2023 21:42:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:42:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'vw&ic 6/15/2023 21:42:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'vw&ic 6/15/2023 21:42:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'vw&ic 6/15/2023 21:42:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'vw&ic 6/15/2023 21:42:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'vw&ic 6/15/2023 21:42:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'vw&ic 6/15/2023 21:42:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'vw&ic 6/15/2023 21:42:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'vw&ic 6/15/2023 21:42:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'vw&ic 6/15/2023 21:42:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'vw&ic 6/15/2023 21:42:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'vw&ic 6/15/2023 21:42:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'vw&ic 6/15/2023 21:42:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:42:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:42:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:42:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:42:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:42:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:42:36'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:43:57' prior: 50667644!
storePerformance

	| totalMoney totalSales performance listOfBlocks| 
	
	performance := Dictionary new.
	listOfBlocks := OrderedCollection with: [totalSales := self totalSales.] 
														 with: [totalMoney := self totalMoneyRaised.].
	self waitForConcurrentBlocksToFinishExcution: listOfBlocks.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'vw&ic 6/15/2023 21:44:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'vw&ic 6/15/2023 21:44:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:44:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'vw&ic 6/15/2023 21:44:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'vw&ic 6/15/2023 21:44:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'vw&ic 6/15/2023 21:44:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'vw&ic 6/15/2023 21:44:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'vw&ic 6/15/2023 21:44:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'vw&ic 6/15/2023 21:44:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'vw&ic 6/15/2023 21:44:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'vw&ic 6/15/2023 21:44:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'vw&ic 6/15/2023 21:44:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'vw&ic 6/15/2023 21:44:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'vw&ic 6/15/2023 21:44:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'vw&ic 6/15/2023 21:44:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:44:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:44:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:44:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:44:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:44:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:44:03'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:44:03'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:44:10' prior: 50667754!
waitForConcurrentBlocksToFinishExcution: aListOfBlocks

	| semaphore |
	
	semaphore := Semaphore new.
	aListOfBlocks do: [:aBlock | [aBlock ensure: [semaphore signal]] fork. ].
	aListOfBlocks size timesRepeat: [:aBlock | semaphore wait. ].

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'vw&ic 6/15/2023 21:44:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'vw&ic 6/15/2023 21:44:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:44:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'vw&ic 6/15/2023 21:44:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'vw&ic 6/15/2023 21:44:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'vw&ic 6/15/2023 21:44:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'vw&ic 6/15/2023 21:44:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'vw&ic 6/15/2023 21:44:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'vw&ic 6/15/2023 21:44:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'vw&ic 6/15/2023 21:44:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'vw&ic 6/15/2023 21:44:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'vw&ic 6/15/2023 21:44:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'vw&ic 6/15/2023 21:44:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'vw&ic 6/15/2023 21:44:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'vw&ic 6/15/2023 21:44:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:44:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:44:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:44:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:44:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:44:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:44:12'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:44:12'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:44:25' prior: 50667954!
waitForConcurrentBlocksToFinishExcution: aListOfBlocks

	| semaphore |
	
	semaphore := Semaphore new.
	aListOfBlocks do: [:aBlock | [aBlock ensure: [semaphore signal]] fork. ].
	(aListOfBlocks size) timesRepeat: [:aBlock | semaphore wait. ].

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'vw&ic 6/15/2023 21:44:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'vw&ic 6/15/2023 21:44:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:44:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'vw&ic 6/15/2023 21:44:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'vw&ic 6/15/2023 21:44:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'vw&ic 6/15/2023 21:44:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'vw&ic 6/15/2023 21:44:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'vw&ic 6/15/2023 21:44:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'vw&ic 6/15/2023 21:44:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'vw&ic 6/15/2023 21:44:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'vw&ic 6/15/2023 21:44:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'vw&ic 6/15/2023 21:44:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'vw&ic 6/15/2023 21:44:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'vw&ic 6/15/2023 21:44:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'vw&ic 6/15/2023 21:44:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:44:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:44:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:44:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:44:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:44:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:44:27'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:44:27'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:44:42' prior: 50668050!
waitForConcurrentBlocksToFinishExcution: aListOfBlocks

	| semaphore |
	
	semaphore := Semaphore new.
	aListOfBlocks do: [:aBlock | [aBlock ensure: [semaphore signal]] fork. ].
	(aListOfBlocks size) timesRepeat: [ semaphore wait. ].

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'vw&ic 6/15/2023 21:44:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'vw&ic 6/15/2023 21:44:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:44:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'vw&ic 6/15/2023 21:44:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'vw&ic 6/15/2023 21:44:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'vw&ic 6/15/2023 21:44:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'vw&ic 6/15/2023 21:44:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'vw&ic 6/15/2023 21:44:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'vw&ic 6/15/2023 21:44:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'vw&ic 6/15/2023 21:44:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'vw&ic 6/15/2023 21:44:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'vw&ic 6/15/2023 21:44:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'vw&ic 6/15/2023 21:44:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'vw&ic 6/15/2023 21:44:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'vw&ic 6/15/2023 21:44:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:44:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:44:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:44:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:44:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:44:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:44:46'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:45:12' prior: 50667847!
storePerformance

	| totalMoney totalSales performance listOfBlocks| 
	
	performance := Dictionary new.
	listOfBlocks := OrderedCollection with: [totalSales := self totalSales.] 
								  with: [totalMoney := self totalMoneyRaised.].
	self waitForConcurrentBlocksToFinishExcution: listOfBlocks.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:45:57' prior: 50666448!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales listOfBlocks|

	bookPerformance := Dictionary new.
	listOfBlocks := OrderedCollection with: [totalSales := self totalSalesOf: anItem.] 
								  with: [totalMoney :=  self totalMoneyRaisedBy: anItem].
	self waitForConcurrentBlocksToFinishExcution: listOfBlocks.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'vw&ic 6/15/2023 21:45:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'vw&ic 6/15/2023 21:45:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:45:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'vw&ic 6/15/2023 21:45:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'vw&ic 6/15/2023 21:45:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'vw&ic 6/15/2023 21:45:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'vw&ic 6/15/2023 21:45:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'vw&ic 6/15/2023 21:45:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'vw&ic 6/15/2023 21:45:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'vw&ic 6/15/2023 21:45:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'vw&ic 6/15/2023 21:45:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'vw&ic 6/15/2023 21:45:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'vw&ic 6/15/2023 21:45:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'vw&ic 6/15/2023 21:45:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'vw&ic 6/15/2023 21:45:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:45:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:45:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:45:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:45:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:45:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:46:00'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:47:13'!
generatePerformanceWithSales: totalSales AndMoney: totalMoney asfg: performance

	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:47:13' prior: 50668238!
storePerformance

	| totalMoney totalSales performance listOfBlocks| 
	
	performance := Dictionary new.
	listOfBlocks := OrderedCollection with: [totalSales := self totalSales.] 
								  with: [totalMoney := self totalMoneyRaised.].
	self waitForConcurrentBlocksToFinishExcution: listOfBlocks.
	
	self generatePerformanceWithSales: totalSales AndMoney: totalMoney asfg: performance.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:47:30' prior: 50668362!
generatePerformanceWithSales: totalSales AndMoney: totalMoney asfg: performance2
	
	| performance |
	performance := Dictionary new.
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:47:53'!
generatePerformanceWithSales: totalSales AndMoney: totalMoney 
	
	| performance |
	performance := Dictionary new.
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'vw&ic 6/15/2023 21:47:53' prior: 50668376!
storePerformance

	| totalMoney totalSales performance listOfBlocks| 
	
	performance := Dictionary new.
	listOfBlocks := OrderedCollection with: [totalSales := self totalSales.] 
								  with: [totalMoney := self totalMoneyRaised.].
	self waitForConcurrentBlocksToFinishExcution: listOfBlocks.
	
	self generatePerformanceWithSales: totalSales AndMoney: totalMoney .
	
	^performance
	

! !

!methodRemoval: TusLibrosSystemFacade #generatePerformanceWithSales:AndMoney:asfg: stamp: 'vw&ic 6/15/2023 21:47:53'!
generatePerformanceWithSales: totalSales AndMoney: totalMoney asfg: performance2
	
	| performance |
	performance := Dictionary new.
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:48:14' prior: 50668407!
generatePerformanceWithSales: totalSales AndMoney: totalMoney 
	
	| performance |
	performance := Dictionary new.
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString
	
	^performance! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:48:15' prior: 50668422!
storePerformance

	| totalMoney totalSales listOfBlocks| 
	
	listOfBlocks := OrderedCollection with: [totalSales := self totalSales.] 
								  with: [totalMoney := self totalMoneyRaised.].
	self waitForConcurrentBlocksToFinishExcution: listOfBlocks.
	
	self generatePerformanceWithSales: totalSales AndMoney: totalMoney .
	
	
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:48:22' prior: 50668468!
storePerformance

	| totalMoney totalSales listOfBlocks| 
	
	listOfBlocks := OrderedCollection with: [totalSales := self totalSales.] 
								  with: [totalMoney := self totalMoneyRaised.].
	self waitForConcurrentBlocksToFinishExcution: listOfBlocks.
	
	^self generatePerformanceWithSales: totalSales AndMoney: totalMoney .
	
	
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:49:14'!
generatePerformanceWithSales: totalSales AndMoney: totalMoney withSummaryText: aSummary  
	
	| performance |
	performance := Dictionary new.
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString
	
	^performance! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'vw&ic 6/15/2023 21:49:14' prior: 50668482!
storePerformance

	| totalMoney totalSales listOfBlocks| 
	
	listOfBlocks := OrderedCollection with: [totalSales := self totalSales.] 
								  with: [totalMoney := self totalMoneyRaised.].
	self waitForConcurrentBlocksToFinishExcution: listOfBlocks.
	
	^self generatePerformanceWithSales: totalSales AndMoney: totalMoney withSummaryText: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString .
	
	
	

! !

!methodRemoval: TusLibrosSystemFacade #generatePerformanceWithSales:AndMoney: stamp: 'vw&ic 6/15/2023 21:49:14'!
generatePerformanceWithSales: totalSales AndMoney: totalMoney 
	
	| performance |
	performance := Dictionary new.
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString
	
	^performance!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:49:31'!
generatePerformanceWithSales: totalSales andMoney: totalMoney withSummaryText: aSummary  
	
	| performance |
	performance := Dictionary new.
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString
	
	^performance! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'vw&ic 6/15/2023 21:49:31' prior: 50668512!
storePerformance

	| totalMoney totalSales listOfBlocks| 
	
	listOfBlocks := OrderedCollection with: [totalSales := self totalSales.] 
								  with: [totalMoney := self totalMoneyRaised.].
	self waitForConcurrentBlocksToFinishExcution: listOfBlocks.
	
	^self generatePerformanceWithSales: totalSales andMoney: totalMoney withSummaryText: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString .
	
	
	

! !

!methodRemoval: TusLibrosSystemFacade #generatePerformanceWithSales:AndMoney:withSummaryText: stamp: 'vw&ic 6/15/2023 21:49:31'!
generatePerformanceWithSales: totalSales AndMoney: totalMoney withSummaryText: aSummary  
	
	| performance |
	performance := Dictionary new.
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString
	
	^performance!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:49:44' prior: 50668562!
storePerformance

	| totalMoney totalSales listOfBlocks| 
	
	listOfBlocks := OrderedCollection with: [totalSales := self totalSales.] 
								  with: [totalMoney := self totalMoneyRaised.].
	self waitForConcurrentBlocksToFinishExcution: listOfBlocks.
	
	^self generatePerformanceWithSales: totalSales 
		andMoney: totalMoney 
		withSummaryText: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString .
	
	
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:50:23' prior: 50668259!
bookPerformance: anItem

	| totalMoney totalSales listOfBlocks|

	listOfBlocks := OrderedCollection with: [totalSales := self totalSalesOf: anItem.] 
								  with: [totalMoney :=  self totalMoneyRaisedBy: anItem].
	self waitForConcurrentBlocksToFinishExcution: listOfBlocks.
	
	^self generatePerformanceWithSales: totalSales 
		andMoney: totalMoney 
		withSummaryText: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'vw&ic 6/15/2023 21:50:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'vw&ic 6/15/2023 21:50:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:50:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'vw&ic 6/15/2023 21:50:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'vw&ic 6/15/2023 21:50:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'vw&ic 6/15/2023 21:50:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'vw&ic 6/15/2023 21:50:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'vw&ic 6/15/2023 21:50:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'vw&ic 6/15/2023 21:50:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'vw&ic 6/15/2023 21:50:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'vw&ic 6/15/2023 21:50:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'vw&ic 6/15/2023 21:50:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'vw&ic 6/15/2023 21:50:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'vw&ic 6/15/2023 21:50:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'vw&ic 6/15/2023 21:50:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:50:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:50:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:50:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:50:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:50:25'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:50:26'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:50:40'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:50:52' prior: 50668597!
storePerformance

	| totalMoney totalSales listOfBlocks| 
	
	listOfBlocks := OrderedCollection with: [totalSales := self totalSales.] 
								  with: [totalMoney := self totalMoneyRaised.].
	self waitForConcurrentBlocksToFinishExcution: listOfBlocks.
	
	^ self generatePerformanceWithSales: totalSales 
		andMoney: totalMoney 
		withSummaryText: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString .
	
	
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:51:10' prior: 50668616!
bookPerformance: anItem

	| totalMoney totalSales listOfBlocks|

	listOfBlocks := OrderedCollection with: [totalSales := self totalSalesOf: anItem.] 
								  with: [totalMoney :=  self totalMoneyRaisedBy: anItem].
	self waitForConcurrentBlocksToFinishExcution: listOfBlocks.
	
	^self generatePerformanceWithSales: totalSales 
		andMoney: totalMoney 
		withSummaryText: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	

! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:51:31'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:51:32'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:51:44' prior: 50668545!
generatePerformanceWithSales: totalSales andMoney: totalMoney withSummaryText: aSummary  
	
	| performance |
	performance := Dictionary new.
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:51:46'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:51:49'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'vw&ic 6/15/2023 21:52:19' prior: 50668766!
generatePerformanceWithSales: totalSales andMoney: totalMoney withSummaryText: aSummary  
	
	| performance |
	performance := Dictionary new.
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: aSummary.
	
	^performance! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'vw&ic 6/15/2023 21:52:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'vw&ic 6/15/2023 21:52:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:52:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'vw&ic 6/15/2023 21:52:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'vw&ic 6/15/2023 21:52:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'vw&ic 6/15/2023 21:52:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'vw&ic 6/15/2023 21:52:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'vw&ic 6/15/2023 21:52:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'vw&ic 6/15/2023 21:52:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'vw&ic 6/15/2023 21:52:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'vw&ic 6/15/2023 21:52:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'vw&ic 6/15/2023 21:52:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'vw&ic 6/15/2023 21:52:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'vw&ic 6/15/2023 21:52:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'vw&ic 6/15/2023 21:52:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'vw&ic 6/15/2023 21:52:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:52:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:52:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'vw&ic 6/15/2023 21:52:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:52:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'vw&ic 6/15/2023 21:52:22'!
PASSED!

----SNAPSHOT----(15 June 2023 21:52:28) CuisUniversity-5832.image priorSource: 9366758!

----SNAPSHOT----(15 June 2023 21:53:27) CuisUniversity-5832.image priorSource: 10791438!

----STARTUP---- (21 June 2023 22:15:18) as /home/valewodka/Downloads/linux64/CuisUniversity-5832.image!


Object subclass: #ConcurrentExecutor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #ConcurrentExecutor category: 'TusLibros-Model' stamp: 'IC & VW 6/21/2023 22:17:23'!
Object subclass: #ConcurrentExecutor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!ConcurrentExecutor methodsFor: 'no messages' stamp: 'IC & VW 6/21/2023 22:17:41'!
waitForConcurrentBlocksToFinishExcution: aListOfBlocks

	| semaphore |
	
	semaphore := Semaphore new.
	aListOfBlocks do: [:aBlock | [aBlock ensure: [semaphore signal]] fork. ].
	(aListOfBlocks size) timesRepeat: [ semaphore wait. ].


! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'IC & VW 6/21/2023 22:18:16' prior: 50668739!
bookPerformance: anItem

	| totalMoney totalSales listOfBlocks|

	listOfBlocks := OrderedCollection with: [totalSales := self totalSalesOf: anItem.] 
								  with: [totalMoney :=  self totalMoneyRaisedBy: anItem].
	ConcurrentExecutor waitForConcurrentBlocksToFinishExcution: listOfBlocks.
	
	^self generatePerformanceWithSales: totalSales 
		andMoney: totalMoney 
		withSummaryText: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'IC & VW 6/21/2023 22:18:26' prior: 50668720!
storePerformance

	| totalMoney totalSales listOfBlocks| 
	
	listOfBlocks := OrderedCollection with: [totalSales := self totalSales.] 
								  with: [totalMoney := self totalMoneyRaised.].
	ConcurrentExecutor waitForConcurrentBlocksToFinishExcution: listOfBlocks.
	
	^ self generatePerformanceWithSales: totalSales 
		andMoney: totalMoney 
		withSummaryText: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString .
	
	
	

! !

!methodRemoval: TusLibrosSystemFacade #waitForConcurrentBlocksToFinishExcution: stamp: 'IC & VW 6/21/2023 22:18:46'!
waitForConcurrentBlocksToFinishExcution: aListOfBlocks

	| semaphore |
	
	semaphore := Semaphore new.
	aListOfBlocks do: [:aBlock | [aBlock ensure: [semaphore signal]] fork. ].
	(aListOfBlocks size) timesRepeat: [ semaphore wait. ].

!
!ConcurrentExecutor methodsFor: 'as yet unclassified' stamp: 'IC & VW 6/21/2023 22:19:32'!
execute: aListOfBlocks

	| semaphore |
	
	semaphore := Semaphore new.
	aListOfBlocks do: [:aBlock | [aBlock ensure: [semaphore signal]] fork. ].
	(aListOfBlocks size) timesRepeat: [ semaphore wait. ].


! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'IC & VW 6/21/2023 22:19:32' prior: 50668935!
storePerformance

	| totalMoney totalSales listOfBlocks| 
	
	listOfBlocks := OrderedCollection with: [totalSales := self totalSales.] 
								  with: [totalMoney := self totalMoneyRaised.].
	ConcurrentExecutor execute: listOfBlocks.
	
	^ self generatePerformanceWithSales: totalSales 
		andMoney: totalMoney 
		withSummaryText: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString .
	
	
	

! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'IC & VW 6/21/2023 22:19:32' prior: 50668915!
bookPerformance: anItem

	| totalMoney totalSales listOfBlocks|

	listOfBlocks := OrderedCollection with: [totalSales := self totalSalesOf: anItem.] 
								  with: [totalMoney :=  self totalMoneyRaisedBy: anItem].
	ConcurrentExecutor execute: listOfBlocks.
	
	^self generatePerformanceWithSales: totalSales 
		andMoney: totalMoney 
		withSummaryText: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	

! !

!methodRemoval: ConcurrentExecutor #waitForConcurrentBlocksToFinishExcution: stamp: 'IC & VW 6/21/2023 22:19:32'!
waitForConcurrentBlocksToFinishExcution: aListOfBlocks

	| semaphore |
	
	semaphore := Semaphore new.
	aListOfBlocks do: [:aBlock | [aBlock ensure: [semaphore signal]] fork. ].
	(aListOfBlocks size) timesRepeat: [ semaphore wait. ].


!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'IC & VW 6/21/2023 22:19:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'IC & VW 6/21/2023 22:19:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'IC & VW 6/21/2023 22:19:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'IC & VW 6/21/2023 22:19:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'IC & VW 6/21/2023 22:19:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'IC & VW 6/21/2023 22:19:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'IC & VW 6/21/2023 22:19:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'IC & VW 6/21/2023 22:19:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'IC & VW 6/21/2023 22:19:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'IC & VW 6/21/2023 22:19:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'IC & VW 6/21/2023 22:19:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'IC & VW 6/21/2023 22:19:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'IC & VW 6/21/2023 22:19:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'IC & VW 6/21/2023 22:19:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'IC & VW 6/21/2023 22:19:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'IC & VW 6/21/2023 22:19:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'IC & VW 6/21/2023 22:19:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'IC & VW 6/21/2023 22:19:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'IC & VW 6/21/2023 22:19:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'IC & VW 6/21/2023 22:19:38'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'IC & VW 6/21/2023 22:19:38'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'IC & VW 6/21/2023 22:21:15'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'IC & VW 6/21/2023 22:21:15'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'IC & VW 6/21/2023 22:21:20'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'IC & VW 6/21/2023 22:21:20'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'IC & VW 6/21/2023 22:21:23'!
ERROR!
!ConcurrentExecutor class methodsFor: 'as yet unclassified' stamp: 'IC & VW 6/21/2023 22:21:53'!
execute: aListOfBlocks

	| semaphore |
	
	semaphore := Semaphore new.
	aListOfBlocks do: [:aBlock | [aBlock ensure: [semaphore signal]] fork. ].
	(aListOfBlocks size) timesRepeat: [ semaphore wait. ].


! !

!methodRemoval: ConcurrentExecutor #execute: stamp: 'IC & VW 6/21/2023 22:21:53'!
execute: aListOfBlocks

	| semaphore |
	
	semaphore := Semaphore new.
	aListOfBlocks do: [:aBlock | [aBlock ensure: [semaphore signal]] fork. ].
	(aListOfBlocks size) timesRepeat: [ semaphore wait. ].


!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'IC & VW 6/21/2023 22:21:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'IC & VW 6/21/2023 22:21:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'IC & VW 6/21/2023 22:21:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'IC & VW 6/21/2023 22:21:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'IC & VW 6/21/2023 22:21:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'IC & VW 6/21/2023 22:21:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'IC & VW 6/21/2023 22:21:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'IC & VW 6/21/2023 22:21:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'IC & VW 6/21/2023 22:21:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'IC & VW 6/21/2023 22:21:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'IC & VW 6/21/2023 22:21:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'IC & VW 6/21/2023 22:21:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'IC & VW 6/21/2023 22:21:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'IC & VW 6/21/2023 22:21:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'IC & VW 6/21/2023 22:21:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'IC & VW 6/21/2023 22:21:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'IC & VW 6/21/2023 22:21:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'IC & VW 6/21/2023 22:21:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'IC & VW 6/21/2023 22:21:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'IC & VW 6/21/2023 22:21:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'IC & VW 6/21/2023 22:21:59'!
PASSED!

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.
!

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/21/2023 22:30:21' prior: 50663111!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	
	[resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
	
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]
	] fork.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/21/2023 22:30:49' prior: 50669234!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	
	[resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
	
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]
	] fork.! !

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/21/2023 22:34:46' prior: 50669250!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	
	[
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		resp isSuccess 
			ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
			ifFalse:[^self error: resp content]
	] fork.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/21/2023 22:36:02' prior: 50669269!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	
	[
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		resp isSuccess 
			ifTrue:[(WebUtils jsonDecode: ((resp content) readStream))]
			ifFalse:[self error: resp content]
	] fork.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/21/2023 22:36:26' prior: 50669285!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	
	[
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		resp isSuccess 
			ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
			ifFalse:[^self error: resp content]
	] fork.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/21/2023 22:40:33' prior: 50669301!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	
	[
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		resp isSuccess 
			ifTrue:[(WebUtils jsonDecode: ((resp content) readStream))]
			ifFalse:[self error: resp content]
	] fork.! !

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.
!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'IC & VW 6/21/2023 22:44:15' prior: 50663239!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId 
				     andExecute: [self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]
		]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/21/2023 22:46:35'!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId andExecute: aBlock 

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	
	[
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		resp isSuccess 
			ifTrue:[(WebUtils jsonDecode: ((resp content) readStream))]
			ifFalse:[self error: resp content]
	] fork.! !
!TusLibrosServerRestInterface methodsFor: 'as yet unclassified' stamp: 'IC & VW 6/21/2023 22:46:35' prior: 50663358!
addToCart: aRequest

	| bookIsbn cartId quantity |

	(Delay forSeconds: 3) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		cartId := self cartIdFrom: requestFields.
		bookIsbn := self bookIsbnFrom: requestFields.
		quantity := self bookQuantityFrom: requestFields].
		
	self 
		answer: [
			systemFacade add: quantity of: bookIsbn toCartIdentifiedAs: cartId andExecute: [self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)].
			'OK' ]
		to: aRequest 
	! !

!methodRemoval: TusLibrosClientRestInterface #add:of:toCartIdentifiedAs: stamp: 'IC & VW 6/21/2023 22:46:35'!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	
	[
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		resp isSuccess 
			ifTrue:[(WebUtils jsonDecode: ((resp content) readStream))]
			ifFalse:[self error: resp content]
	] fork.!

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/21/2023 22:49:15' prior: 50669349!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId andExecute: aBlock 

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	
	[
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		resp isSuccess 
			ifTrue:[(WebUtils jsonDecode: ((resp content) readStream)). aBlock value.]
			ifFalse:[self error: resp content].
	] fork.
! !

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.
!
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'IC & VW 6/21/2023 22:54:04' prior: 50669366!
addToCart: aRequest

	| bookIsbn cartId quantity |

	(Delay forSeconds: 3) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		cartId := self cartIdFrom: requestFields.
		bookIsbn := self bookIsbnFrom: requestFields.
		quantity := self bookQuantityFrom: requestFields].
		
	self 
		answer: [
			systemFacade add: quantity of: bookIsbn toCartIdentifiedAs: cartId.
			'OK' ]
		to: aRequest 
	! !

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/21/2023 23:01:56'!
createCartFor: aUser password: aPassword andExecute: aBlock 

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'IC & VW 6/21/2023 23:01:56' prior: 50663252!
createCart

	| newCartId |
	
	newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk' andExecute: [cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived].
	cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived! !

!methodRemoval: TusLibrosClientRestInterface #createCartFor:password: stamp: 'IC & VW 6/21/2023 23:01:56'!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/21/2023 23:04:27' prior: 50669443!
createCartFor: aUser password: aPassword andExecute: aBlock 

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[ aBlock value:(WebUtils jsonDecode: ((resp content) readStream)). ] 
		ifFalse:[^self error: resp content]! !

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.
!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'IC & VW 6/21/2023 23:05:02' prior: 50669459!
createCart

	| newCartId |
	
	newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk' andExecute: [:cartId | cartIds add: cartId.
	self triggerEvent: #newCartIdArrived].
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/21/2023 23:06:46' prior: 50669485!
createCartFor: aUser password: aPassword andExecute: aBlock 

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	[
		resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		resp isSuccess 
			ifTrue:[ aBlock value:(WebUtils jsonDecode: ((resp content) readStream)). ] 
			ifFalse:[^self error: resp content]
	] fork.! !

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/21/2023 23:08:00' prior: 50663140!
listCart: cartId

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	[
		resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
		resp isSuccess 
			ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
			ifFalse:[^self error: resp content]
	] fork.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/21/2023 23:08:18' prior: 50669533!
listCart: cartId

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	[
		resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
		resp isSuccess 
			ifTrue:[(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
			ifFalse:[self error: resp content]
	] fork.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/21/2023 23:08:25' prior: 50669514!
createCartFor: aUser password: aPassword andExecute: aBlock 

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	[
		resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		resp isSuccess 
			ifTrue:[ aBlock value:(WebUtils jsonDecode: ((resp content) readStream)). ] 
			ifFalse:[self error: resp content]
	] fork.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/21/2023 23:09:48'!
listCart: cartId andExecute: aBlock 

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	[
		resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
		resp isSuccess 
			ifTrue:[(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
			ifFalse:[self error: resp content]
	] fork.! !
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'IC & VW 6/21/2023 23:09:48'!
listCart: aRequest andExecute: aBlock 

	| cartId |

	(Delay forSeconds: 10) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		cartId := self cartIdFrom: requestFields ].
	
	self 
		answer: [(systemFacade listCartIdentifiedAs: cartId) asArray]
		to: aRequest 
! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'IC & VW 6/21/2023 23:09:48' prior: 50663261!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		currentSelectedCartContent := restInterface listCart: cartId andExecute: [self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId].
		self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ].! !
!TusLibrosServerRestInterface class methodsFor: 'as yet unclassified' stamp: 'IC & VW 6/21/2023 23:09:48' prior: 50663507!
installForDefaultSystem

	"self installForDefaultSystem"
	
	| server port interface |
	
	interface := self on: self defaultSystem.
	
	"Esto es para poder acceder a la interface de manera global - Hernan"
	Smalltalk at: #CurrentTusLibrosRestInterface put: interface.
	
	port := 9999.
	server := WebServer reset default.
	server listenOn: port.
	server 
		addService: '/createCart' 
		action: [:request | interface createCart: request ].
	server 
		addService: '/addToCart' 
		action: [:request | interface addToCart: request ].
	server
		addService: '/listCart' 
		action: [:request | interface listCart: request andExecute: [self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId] ].
	server
		addService: '/checkOutCart' 
		action: [:request | interface checkOutCart: request ].
	server
		addService: '/listPurchases' 
		action: [:request | interface listPurchases: request ].
	server useDebugErrorHandler ! !

!methodRemoval: TusLibrosClientRestInterface #listCart: stamp: 'IC & VW 6/21/2023 23:09:48'!
listCart: cartId

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	[
		resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
		resp isSuccess 
			ifTrue:[(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
			ifFalse:[self error: resp content]
	] fork.!

!methodRemoval: TusLibrosServerRestInterface #listCart: stamp: 'IC & VW 6/21/2023 23:09:48'!
listCart: aRequest

	| cartId |

	(Delay forSeconds: 10) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		cartId := self cartIdFrom: requestFields ].
	
	self 
		answer: [(systemFacade listCartIdentifiedAs: cartId) asArray]
		to: aRequest 
!
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'IC & VW 6/21/2023 23:10:16'!
listCart: aRequest  

	| cartId |

	(Delay forSeconds: 10) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		cartId := self cartIdFrom: requestFields ].
	
	self 
		answer: [(systemFacade listCartIdentifiedAs: cartId) asArray]
		to: aRequest 
! !
!TusLibrosServerRestInterface class methodsFor: 'as yet unclassified' stamp: 'IC & VW 6/21/2023 23:10:16' prior: 50669619!
installForDefaultSystem

	"self installForDefaultSystem"
	
	| server port interface |
	
	interface := self on: self defaultSystem.
	
	"Esto es para poder acceder a la interface de manera global - Hernan"
	Smalltalk at: #CurrentTusLibrosRestInterface put: interface.
	
	port := 9999.
	server := WebServer reset default.
	server listenOn: port.
	server 
		addService: '/createCart' 
		action: [:request | interface createCart: request ].
	server 
		addService: '/addToCart' 
		action: [:request | interface addToCart: request ].
	server
		addService: '/listCart' 
		action: [:request | interface listCart: request ].
	server
		addService: '/checkOutCart' 
		action: [:request | interface checkOutCart: request ].
	server
		addService: '/listPurchases' 
		action: [:request | interface listPurchases: request ].
	server useDebugErrorHandler ! !

!methodRemoval: TusLibrosServerRestInterface #listCart:andExecute: stamp: 'IC & VW 6/21/2023 23:10:16'!
listCart: aRequest andExecute: aBlock 

	| cartId |

	(Delay forSeconds: 10) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		cartId := self cartIdFrom: requestFields ].
	
	self 
		answer: [(systemFacade listCartIdentifiedAs: cartId) asArray]
		to: aRequest 
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/21/2023 23:11:28' prior: 50669577!
listCart: cartId andExecute: aBlock 

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	[
		resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
		resp isSuccess 
			ifTrue:[(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection. aBlock value.] 
			ifFalse:[self error: resp content]
	] fork.! !

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.
!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'IC & VW 6/21/2023 23:13:45' prior: 50669605!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		restInterface listCart: cartId andExecute: [:cartContent | 
			currentSelectedCartContent := cartContent
			self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId].
		 ].! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/21/2023 23:14:14' prior: 50669730!
listCart: cartId andExecute: aBlock 

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	[
		resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
		resp isSuccess 
			ifTrue:[ aBlock value:(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection.] 
			ifFalse:[self error: resp content]
	] fork.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/21/2023 23:15:29' prior: 50669761!
listCart: cartId andExecute: aBlock 

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	[
		resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
		resp isSuccess 
			ifTrue:[ aBlock value:(WebUtils jsonDecode: (((resp content) readStream)) asOrderedCollection).] 
			ifFalse:[self error: resp content]
	] fork.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/21/2023 23:16:17' prior: 50669776!
listCart: cartId andExecute: aBlock 

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	[
		resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
		resp isSuccess 
			ifTrue:[ aBlock value:((WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection).] 
			ifFalse:[self error: resp content]
	] fork.! !

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.
!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'IC & VW 6/21/2023 23:18:21' prior: 50669748!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		restInterface listCart: cartId andExecute: [:cartContent | 
			currentSelectedCartContent := cartContent.
			self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId].
		 ].! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.
!

----SNAPSHOT----(21 June 2023 23:20:46) CuisUniversity-5832.image priorSource: 10791527!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/21/2023 23:21:45' prior: 50669404!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId andExecute: aBlock 

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	[
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		resp isSuccess 
			ifTrue:[(WebUtils jsonDecode: ((resp content) readStream)). aBlock value.]
			ifFalse:[self error: resp content].
	] fork.
! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'IC & VW 6/21/2023 23:24:35' prior: 50669336!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId 
				     andExecute: [:cartIda |self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartIda)]
		]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'IC & VW 6/21/2023 23:25:08' prior: 50669846!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId 
				     andExecute: [:aaaa |self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]
		]! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.
!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'IC & VW 6/21/2023 23:25:44' prior: 50669860!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId 
				     andExecute: [:aaaa |self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]
		]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/21/2023 23:25:52' prior: 50669828!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId andExecute: aBlock 

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	[
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		resp isSuccess 
			ifTrue:[aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).]
			ifFalse:[self error: resp content].
	] fork.
! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.
!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'IC & VW 6/21/2023 23:27:27' prior: 50669878!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId 
				     andExecute: [:param |self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId).]
		]! !

----SNAPSHOT----(21 June 2023 23:28:21) CuisUniversity-5832.image priorSource: 10821540!

----SNAPSHOT----(21 June 2023 23:28:50) CuisUniversity-5832.image priorSource: 10824810!

----STARTUP---- (22 June 2023 13:29:09) as /home/valewodka/Downloads/linux64/CuisUniversity-5832.image!

!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 13:34:45'!
m1: cartId m2: quantity m3: bookIsbn m4: aBlock

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	[
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		resp isSuccess 
			ifTrue:[aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).]
			ifFalse:[self error: resp content].
	] fork! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 13:34:45' prior: 50669892!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId andExecute: aBlock 

	self m1: cartId m2: quantity m3: bookIsbn m4: aBlock.
! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 13:35:48'!
m1: cartId m2: quantity m3: bookIsbn m4: aBlock createDictFromPairs: DictPairs 

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	[
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		resp isSuccess 
			ifTrue:[aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).]
			ifFalse:[self error: resp content].
	] fork! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 'IC & VW 6/22/2023 13:35:48' prior: 50669952!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId andExecute: aBlock 

	self m1: cartId m2: quantity m3: bookIsbn m4: aBlock createDictFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.
! !

!methodRemoval: TusLibrosClientRestInterface #m1:m2:m3:m4: stamp: 'IC & VW 6/22/2023 13:35:48'!
m1: cartId m2: quantity m3: bookIsbn m4: aBlock

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	[
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		resp isSuccess 
			ifTrue:[aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).]
			ifFalse:[self error: resp content].
	] fork!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 13:36:08' prior: 50669959!
m1: cartId m2: quantity m3: bookIsbn m4: aBlock createDictFromPairs: DictPairs 

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: DictPairs.		
	
	[
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		resp isSuccess 
			ifTrue:[aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).]
			ifFalse:[self error: resp content].
	] fork! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 13:36:48'!
m1: cartId m2: quantity m3: bookIsbn m4: aBlock createDictFromPairs: DictPairs andFork: aBlockToBeForked  

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: DictPairs.		
	
	[
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		resp isSuccess 
			ifTrue:[aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).]
			ifFalse:[self error: resp content].
	] fork! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 'IC & VW 6/22/2023 13:36:48' prior: 50669977!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId andExecute: aBlock 

	self m1: cartId m2: quantity m3: bookIsbn m4: aBlock createDictFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity} andFork: [
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		resp isSuccess 
			ifTrue:[aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).]
			ifFalse:[self error: resp content].
	].
! !

!methodRemoval: TusLibrosClientRestInterface #m1:m2:m3:m4:createDictFromPairs: stamp: 'IC & VW 6/22/2023 13:36:48'!
m1: cartId m2: quantity m3: bookIsbn m4: aBlock createDictFromPairs: DictPairs 

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: DictPairs.		
	
	[
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		resp isSuccess 
			ifTrue:[aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).]
			ifFalse:[self error: resp content].
	] fork!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 13:37:15' prior: 50670018!
m1: cartId m2: quantity m3: bookIsbn m4: aBlock createDictFromPairs: DictPairs andFork: aBlockToBeForked  

	| fieldDict |
	fieldDict := Dictionary newFromPairs: DictPairs.		
	
	aBlockToBeForked fork! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 13:37:34'!
m2: quantity m3: bookIsbn m4: aBlock createDictFromPairs: DictPairs andFork: aBlockToBeForked  

	| fieldDict |
	fieldDict := Dictionary newFromPairs: DictPairs.		
	
	aBlockToBeForked fork! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 'IC & VW 6/22/2023 13:37:34' prior: 50670035!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId andExecute: aBlock 

	self m2: quantity m3: bookIsbn m4: aBlock createDictFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity} andFork: [
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		resp isSuccess 
			ifTrue:[aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).]
			ifFalse:[self error: resp content].
	].
! !

!methodRemoval: TusLibrosClientRestInterface #m1:m2:m3:m4:createDictFromPairs:andFork: stamp: 'IC & VW 6/22/2023 13:37:34'!
m1: cartId m2: quantity m3: bookIsbn m4: aBlock createDictFromPairs: DictPairs andFork: aBlockToBeForked  

	| fieldDict |
	fieldDict := Dictionary newFromPairs: DictPairs.		
	
	aBlockToBeForked fork!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 13:37:41'!
m3: bookIsbn m4: aBlock createDictFromPairs: DictPairs andFork: aBlockToBeForked  

	| fieldDict |
	fieldDict := Dictionary newFromPairs: DictPairs.		
	
	aBlockToBeForked fork! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 'IC & VW 6/22/2023 13:37:41' prior: 50670088!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId andExecute: aBlock 

	self m3: bookIsbn m4: aBlock createDictFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity} andFork: [
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		resp isSuccess 
			ifTrue:[aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).]
			ifFalse:[self error: resp content].
	].
! !

!methodRemoval: TusLibrosClientRestInterface #m2:m3:m4:createDictFromPairs:andFork: stamp: 'IC & VW 6/22/2023 13:37:41'!
m2: quantity m3: bookIsbn m4: aBlock createDictFromPairs: DictPairs andFork: aBlockToBeForked  

	| fieldDict |
	fieldDict := Dictionary newFromPairs: DictPairs.		
	
	aBlockToBeForked fork!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 13:37:47'!
m4: aBlock createDictFromPairs: DictPairs andFork: aBlockToBeForked  

	| fieldDict |
	fieldDict := Dictionary newFromPairs: DictPairs.		
	
	aBlockToBeForked fork! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 'IC & VW 6/22/2023 13:37:47' prior: 50670125!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId andExecute: aBlock 

	self m4: aBlock createDictFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity} andFork: [
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		resp isSuccess 
			ifTrue:[aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).]
			ifFalse:[self error: resp content].
	].
! !

!methodRemoval: TusLibrosClientRestInterface #m3:m4:createDictFromPairs:andFork: stamp: 'IC & VW 6/22/2023 13:37:47'!
m3: bookIsbn m4: aBlock createDictFromPairs: DictPairs andFork: aBlockToBeForked  

	| fieldDict |
	fieldDict := Dictionary newFromPairs: DictPairs.		
	
	aBlockToBeForked fork!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 13:37:54'!
createDictFromPairs: DictPairs andFork: aBlockToBeForked  

	| fieldDict |
	fieldDict := Dictionary newFromPairs: DictPairs.		
	
	aBlockToBeForked fork! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 'IC & VW 6/22/2023 13:37:54' prior: 50670160!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId andExecute: aBlock 

	self createDictFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity} andFork: [
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		resp isSuccess 
			ifTrue:[aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).]
			ifFalse:[self error: resp content].
	].
! !

!methodRemoval: TusLibrosClientRestInterface #m4:createDictFromPairs:andFork: stamp: 'IC & VW 6/22/2023 13:37:54'!
m4: aBlock createDictFromPairs: DictPairs andFork: aBlockToBeForked  

	| fieldDict |
	fieldDict := Dictionary newFromPairs: DictPairs.		
	
	aBlockToBeForked fork!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 13:38:41' prior: 50670194!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId andExecute: aBlock 

	self createDictFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity} andFork: [:fieldDict| |resp|
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		resp isSuccess 
			ifTrue:[aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).]
			ifFalse:[self error: resp content].
	].
! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 13:38:59' prior: 50670185!
createDictFromPairs: DictPairs andFork: aBlockToBeForked  

	| fieldDict |
	fieldDict := Dictionary newFromPairs: DictPairs.		
	
	(aBlockToBeForked value: fieldDict) fork! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 13:39:46' prior: 50670219!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId andExecute: aBlock 

	self createDictFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity} 
		andFork: [:fieldDict| |resp|
				resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
				resp isSuccess 
					ifTrue:[aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).]
					ifFalse:[self error: resp content].
	].
! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/21/2023 23:25:52' prior: 50670245!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId andExecute: aBlock 

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	[
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		resp isSuccess 
			ifTrue:[aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).]
			ifFalse:[self error: resp content].
	] fork.
! !

!methodRemoval: TusLibrosClientRestInterface #createDictFromPairs:andFork: stamp: 'IC & VW 6/22/2023 13:42:34'!
createDictFromPairs: DictPairs andFork: aBlockToBeForked  

	| fieldDict |
	fieldDict := Dictionary newFromPairs: DictPairs.		
	
	(aBlockToBeForked value: fieldDict) fork!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 13:46:33' prior: 50670262!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId andExecute: aBlock 

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	([:fieldDict2| |resp|
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict2.
		resp isSuccess 
			ifTrue:[aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).]
			ifFalse:[self error: resp content].
	] value: fieldDict )fork.
! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 13:47:52'!
bbbb: aBlock cccc: fieldDict
	|resp|
	[
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		resp isSuccess 
			ifTrue:[aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).]
			ifFalse:[self error: resp content].
	] fork.
! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 13:49:53'!
bbbb: aBlock cccc: fieldDict ddd: anAction eee: aSuccessBlock ffff: aFailureBlock
	|resp|
	[
		resp := WebClient htmlSubmit: (self url, anAction) fields: fieldDict.
		resp isSuccess 
			ifTrue:[aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).]
			ifFalse:[self error: resp content].
	] fork.
! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 13:50:21'!
cccc: fieldDict ddd: anAction eee: aSuccessBlock ffff: aFailureBlock
	|resp|
	[
		resp := WebClient htmlSubmit: (self url, anAction) fields: fieldDict.
		resp isSuccess 
			ifTrue: aSuccessBlock
			ifFalse: aFailureBlock.
	] fork.
! !

!methodRemoval: TusLibrosClientRestInterface #bbbb:cccc: stamp: 'IC & VW 6/22/2023 13:50:25'!
bbbb: aBlock cccc: fieldDict
	|resp|
	[
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		resp isSuccess 
			ifTrue:[aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).]
			ifFalse:[self error: resp content].
	] fork.
!

!methodRemoval: TusLibrosClientRestInterface #bbbb:cccc:ddd:eee:ffff: stamp: 'IC & VW 6/22/2023 13:50:30'!
bbbb: aBlock cccc: fieldDict ddd: anAction eee: aSuccessBlock ffff: aFailureBlock
	|resp|
	[
		resp := WebClient htmlSubmit: (self url, anAction) fields: fieldDict.
		resp isSuccess 
			ifTrue:[aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).]
			ifFalse:[self error: resp content].
	] fork.
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 13:50:55'!
ddd: anAction cccc: fieldDict  eee: aSuccessBlock ffff: aFailureBlock
	|resp|
	[
		resp := WebClient htmlSubmit: (self url, anAction) fields: fieldDict.
		resp isSuccess 
			ifTrue: aSuccessBlock
			ifFalse: aFailureBlock.
	] fork.
! !

!methodRemoval: TusLibrosClientRestInterface #cccc:ddd:eee:ffff: stamp: 'IC & VW 6/22/2023 13:50:58'!
cccc: fieldDict ddd: anAction eee: aSuccessBlock ffff: aFailureBlock
	|resp|
	[
		resp := WebClient htmlSubmit: (self url, anAction) fields: fieldDict.
		resp isSuccess 
			ifTrue: aSuccessBlock
			ifFalse: aFailureBlock.
	] fork.
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 13:51:56'!
endPoint: anAction withDict: fieldDict  onSuccess: aSuccessBlock onFailure: aFailureBlock
	|resp|
	[
		resp := WebClient htmlSubmit: (self url, anAction) fields: fieldDict.
		resp isSuccess 
			ifTrue: aSuccessBlock
			ifFalse: aFailureBlock.
	] fork.
! !

!methodRemoval: TusLibrosClientRestInterface #ddd:cccc:eee:ffff: stamp: 'IC & VW 6/22/2023 13:51:56'!
ddd: anAction cccc: fieldDict  eee: aSuccessBlock ffff: aFailureBlock
	|resp|
	[
		resp := WebClient htmlSubmit: (self url, anAction) fields: fieldDict.
		resp isSuccess 
			ifTrue: aSuccessBlock
			ifFalse: aFailureBlock.
	] fork.
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 13:55:40' prior: 50670288!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId andExecute: aBlock 

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	
	self endPoint: '/addToCart' withDict: fieldDict  onSuccess: [:resp | aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).] onFailure: [:resp |self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 13:55:46' prior: 50670408!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId andExecute: aBlock 

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	
	self endPoint: '/addToCart' withDict: fieldDict  
		onSuccess: [:resp | aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).] 
		onFailure: [:resp |self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 13:55:49' prior: 50670424!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId andExecute: aBlock 

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	self endPoint: '/addToCart' withDict: fieldDict  
		onSuccess: [:resp | aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).] 
		onFailure: [:resp |self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 13:56:47' prior: 50670386!
endPoint: anAction withDict: fieldDict  onSuccess: aSuccessBlock onFailure: aFailureBlock
	|resp|
	[
		resp := WebClient htmlSubmit: (self url, anAction) fields: fieldDict.
		resp isSuccess 
			ifTrue: [(aSuccessBlock value: resp)]
			ifFalse: [(aFailureBlock value: resp)].
	] fork.
! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 14:00:46' prior: 50669561!
createCartFor: aUser password: aPassword andExecute: aBlock 

	| fieldDict|
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	self endPoint: '/createCart' withDict: fieldDict  
		onSuccess: [:resp | aBlock value:(WebUtils jsonDecode: ((resp content) readStream)). ] 
		onFailure: [:resp |self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 14:00:58' prior: 50670472!
createCartFor: aUser password: aPassword andExecute: aBlock 

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	self endPoint: '/createCart' withDict: fieldDict  
		onSuccess: [:resp | aBlock value:(WebUtils jsonDecode: ((resp content) readStream)). ] 
		onFailure: [:resp |self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 14:01:06' prior: 50670487!
createCartFor: aUser password: aPassword andExecute: aBlock 

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	self endPoint: '/createCart' withDict: fieldDict  
		onSuccess: [:resp | aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).] 
		onFailure: [:resp |self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 14:02:08' prior: 50669791!
listCart: cartId andExecute: aBlock 

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	self endPoint: '/listCart' withDict: fieldDict  
		onSuccess: [:resp | aBlock value:((WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection).]  
		onFailure: [:resp | self error: resp content]! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.
!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'IC & VW 6/22/2023 14:10:51' prior: 50669504!
createCart

	| newCartId |
	
	newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk' 
						andExecute: [:cartId | cartIds add: cartId.
									self triggerEvent: #newCartIdArrived].
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'IC & VW 6/22/2023 14:11:08' prior: 50670535!
createCart

	| newCartId |
	
	newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk' 
	andExecute: [:cartId | cartIds add: cartId. self triggerEvent: #newCartIdArrived].
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'IC & VW 6/22/2023 14:12:27' prior: 50670546!
createCart

	| newCartId |
	
	newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk' 
	execute: [:cartId | cartIds add: cartId. self triggerEvent: #newCartIdArrived]
	andIfFailed: [:errorMessage | self inform: errorMessage].
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 14:12:51'!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId execute: aBlock 

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	self endPoint: '/addToCart' withDict: fieldDict  
		onSuccess: [:resp | aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).] 
		onFailure: [:resp |self error: resp content]! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'IC & VW 6/22/2023 14:12:51' prior: 50669913!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId 
				     execute: [:param |self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId).]
		]! !

!methodRemoval: TusLibrosClientRestInterface #add:of:toCartIdentifiedAs:andExecute: stamp: 'IC & VW 6/22/2023 14:12:52'!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId andExecute: aBlock 

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	self endPoint: '/addToCart' withDict: fieldDict  
		onSuccess: [:resp | aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).] 
		onFailure: [:resp |self error: resp content]!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 14:13:19'!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId execute: aBlock andIfFailed: aFailureBlock  

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	self endPoint: '/addToCart' withDict: fieldDict  
		onSuccess: [:resp | aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).] 
		onFailure: [:resp |self error: resp content]! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'IC & VW 6/22/2023 14:13:19' prior: 50670583!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId 
				     execute: [:param |self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId).] andIfFailed: [:errorMessage | self inform: errorMessage]
		]! !

!methodRemoval: TusLibrosClientRestInterface #add:of:toCartIdentifiedAs:execute: stamp: 'IC & VW 6/22/2023 14:13:19'!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId execute: aBlock 

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	self endPoint: '/addToCart' withDict: fieldDict  
		onSuccess: [:resp | aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).] 
		onFailure: [:resp |self error: resp content]!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 14:14:18' prior: 50670613!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId execute: aSuccessBlock andIfFailed: aFailureBlock  

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	self endPoint: '/addToCart' withDict: fieldDict  
		onSuccess: [:resp | aSuccessBlock value:(WebUtils jsonDecode: ((resp content) readStream)).] 
		onFailure: [:resp | aFailureBlock value: (resp content)]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 14:15:41'!
createCartFor: aUser password: aPassword andExecute: aBlock andIfFailed: aFailureBlock  

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	self endPoint: '/createCart' withDict: fieldDict  
		onSuccess: [:resp | aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).] 
		onFailure: [:resp |self error: resp content]! !

!methodRemoval: TusLibrosClientRestInterface #createCartFor:password:andExecute: stamp: 'IC & VW 6/22/2023 14:15:41'!
createCartFor: aUser password: aPassword andExecute: aBlock 

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	self endPoint: '/createCart' withDict: fieldDict  
		onSuccess: [:resp | aBlock value:(WebUtils jsonDecode: ((resp content) readStream)).] 
		onFailure: [:resp |self error: resp content]!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 14:15:55' prior: 50670679!
createCartFor: aUser password: aPassword andExecute: aSuccessBlock andIfFailed: aFailureBlock  

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	self endPoint: '/createCart' withDict: fieldDict  
		onSuccess: [:resp | aSuccessBlock value:(WebUtils jsonDecode: ((resp content) readStream)).] 
		onFailure: [:resp | aFailureBlock value: (resp content)]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 14:16:02'!
createCartFor: aUser password: aPassword execute: aSuccessBlock andIfFailed: aFailureBlock  

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	self endPoint: '/createCart' withDict: fieldDict  
		onSuccess: [:resp | aSuccessBlock value:(WebUtils jsonDecode: ((resp content) readStream)).] 
		onFailure: [:resp | aFailureBlock value: (resp content)]! !

!methodRemoval: TusLibrosClientRestInterface #createCartFor:password:andExecute:andIfFailed: stamp: 'IC & VW 6/22/2023 14:16:02'!
createCartFor: aUser password: aPassword andExecute: aSuccessBlock andIfFailed: aFailureBlock  

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	self endPoint: '/createCart' withDict: fieldDict  
		onSuccess: [:resp | aSuccessBlock value:(WebUtils jsonDecode: ((resp content) readStream)).] 
		onFailure: [:resp | aFailureBlock value: (resp content)]!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 14:16:42'!
listCart: cartId andExecute: aBlock andIfFailed: aFailureBlock  

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	self endPoint: '/listCart' withDict: fieldDict  
		onSuccess: [:resp | aBlock value:((WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection).]  
		onFailure: [:resp | self error: resp content]! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'IC & VW 6/22/2023 14:16:42' prior: 50669809!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		restInterface listCart: cartId andExecute: [:cartContent | 
			currentSelectedCartContent := cartContent.
			self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId] andIfFailed: [].
		 ].! !

!methodRemoval: TusLibrosClientRestInterface #listCart:andExecute: stamp: 'IC & VW 6/22/2023 14:16:42'!
listCart: cartId andExecute: aBlock 

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	self endPoint: '/listCart' withDict: fieldDict  
		onSuccess: [:resp | aBlock value:((WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection).]  
		onFailure: [:resp | self error: resp content]!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 14:16:55' prior: 50670759!
listCart: cartId andExecute: aSuccessBlock andIfFailed: aFailureBlock  

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	self endPoint: '/listCart' withDict: fieldDict  
		onSuccess: [:resp | aSuccessBlock value:((WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection).]  
		onFailure: [:resp | self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 14:17:04' prior: 50670801!
listCart: cartId andExecute: aSuccessBlock andIfFailed: aFailureBlock  

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	self endPoint: '/listCart' withDict: fieldDict  
		onSuccess: [:resp | aSuccessBlock value:((WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection).]  
		onFailure: [:resp | aFailureBlock value: (resp content)]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'IC & VW 6/22/2023 14:17:29' prior: 50670630!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId 
				     execute: [:param |self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId).] 
					andIfFailed: [:errorMessage | self inform: errorMessage]
		]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'IC & VW 6/22/2023 14:18:12' prior: 50670774!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		restInterface listCart: cartId 
					andExecute: [:cartContent | currentSelectedCartContent := cartContent.
										self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId] 
					andIfFailed: [:errorMessage | self inform: errorMessage].
		 ].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'IC & VW 6/22/2023 14:18:23' prior: 50670556!
createCart

	| newCartId |
	
	newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk' 
							execute: [:cartId | cartIds add: cartId. self triggerEvent: #newCartIdArrived]
							andIfFailed: [:errorMessage | self inform: errorMessage].
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'IC & VW 6/22/2023 14:19:34' prior: 50670864!
createCart

	restInterface createCartFor: 'hernan' password: 'smalltalk' 
							execute: [:cartId | cartIds add: cartId. self triggerEvent: #newCartIdArrived]
							andIfFailed: [:errorMessage | self inform: errorMessage].
	! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 14:21:26' prior: 50670726!
createCartFor: aUser password: aPassword execute: aSuccessBlock andIfFailed: aFailureBlock  

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aUser}.		
	
	self endPoint: '/createCart' withDict: fieldDict  
		onSuccess: [:resp | aSuccessBlock value:(WebUtils jsonDecode: ((resp content) readStream)).] 
		onFailure: [:resp | aFailureBlock value: (resp content)]! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 14:22:06' prior: 50670890!
createCartFor: aUser password: aPassword execute: aSuccessBlock andIfFailed: aFailureBlock  

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	self endPoint: '/createCart' withDict: fieldDict  
		onSuccess: [:resp | aSuccessBlock value:(WebUtils jsonDecode: ((resp content) readStream)).] 
		onFailure: [:resp | aFailureBlock value: (resp content)]! !

----SNAPSHOT----(22 June 2023 14:22:08) CuisUniversity-5832.image priorSource: 10824900!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 14:22:37'!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId onSuccess: aSuccessBlock OnFailure: aFailureBlock  

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	self endPoint: '/addToCart' withDict: fieldDict  
		onSuccess: [:resp | aSuccessBlock value:(WebUtils jsonDecode: ((resp content) readStream)).] 
		onFailure: [:resp | aFailureBlock value: (resp content)]! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'IC & VW 6/22/2023 14:22:37' prior: 50670833!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId 
				     onSuccess: [:param |self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId).] 
					OnFailure: [:errorMessage | self inform: errorMessage]
		]! !

!methodRemoval: TusLibrosClientRestInterface #add:of:toCartIdentifiedAs:execute:andIfFailed: stamp: 'IC & VW 6/22/2023 14:22:37'!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId execute: aSuccessBlock andIfFailed: aFailureBlock  

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	self endPoint: '/addToCart' withDict: fieldDict  
		onSuccess: [:resp | aSuccessBlock value:(WebUtils jsonDecode: ((resp content) readStream)).] 
		onFailure: [:resp | aFailureBlock value: (resp content)]!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 14:22:53'!
createCartFor: aUser password: aPassword onSuccess: aSuccessBlock OnFailure: aFailureBlock  

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	self endPoint: '/createCart' withDict: fieldDict  
		onSuccess: [:resp | aSuccessBlock value:(WebUtils jsonDecode: ((resp content) readStream)).] 
		onFailure: [:resp | aFailureBlock value: (resp content)]! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'IC & VW 6/22/2023 14:22:53' prior: 50670876!
createCart

	restInterface createCartFor: 'hernan' password: 'smalltalk' 
							onSuccess: [:cartId | cartIds add: cartId. self triggerEvent: #newCartIdArrived]
							OnFailure: [:errorMessage | self inform: errorMessage].
	! !

!methodRemoval: TusLibrosClientRestInterface #createCartFor:password:execute:andIfFailed: stamp: 'IC & VW 6/22/2023 14:22:53'!
createCartFor: aUser password: aPassword execute: aSuccessBlock andIfFailed: aFailureBlock  

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	self endPoint: '/createCart' withDict: fieldDict  
		onSuccess: [:resp | aSuccessBlock value:(WebUtils jsonDecode: ((resp content) readStream)).] 
		onFailure: [:resp | aFailureBlock value: (resp content)]!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 14:23:06'!
listCart: cartId onSuccess: aSuccessBlock OnFailure: aFailureBlock  

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	self endPoint: '/listCart' withDict: fieldDict  
		onSuccess: [:resp | aSuccessBlock value:((WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection).]  
		onFailure: [:resp | aFailureBlock value: (resp content)]! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'IC & VW 6/22/2023 14:23:06' prior: 50670849!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		restInterface listCart: cartId 
					onSuccess: [:cartContent | currentSelectedCartContent := cartContent.
										self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId] 
					OnFailure: [:errorMessage | self inform: errorMessage].
		 ].! !

!methodRemoval: TusLibrosClientRestInterface #listCart:andExecute:andIfFailed: stamp: 'IC & VW 6/22/2023 14:23:06'!
listCart: cartId andExecute: aSuccessBlock andIfFailed: aFailureBlock  

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	self endPoint: '/listCart' withDict: fieldDict  
		onSuccess: [:resp | aSuccessBlock value:((WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection).]  
		onFailure: [:resp | aFailureBlock value: (resp content)]!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 14:23:16'!
listCart: cartId onSuccess: aSuccessBlock onFailure: aFailureBlock  

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	self endPoint: '/listCart' withDict: fieldDict  
		onSuccess: [:resp | aSuccessBlock value:((WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection).]  
		onFailure: [:resp | aFailureBlock value: (resp content)]! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'IC & VW 6/22/2023 14:23:16' prior: 50671040!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		restInterface listCart: cartId 
					onSuccess: [:cartContent | currentSelectedCartContent := cartContent.
										self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId] 
					onFailure: [:errorMessage | self inform: errorMessage].
		 ].! !

!methodRemoval: TusLibrosClientRestInterface #listCart:onSuccess:OnFailure: stamp: 'IC & VW 6/22/2023 14:23:16'!
listCart: cartId onSuccess: aSuccessBlock OnFailure: aFailureBlock  

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	self endPoint: '/listCart' withDict: fieldDict  
		onSuccess: [:resp | aSuccessBlock value:((WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection).]  
		onFailure: [:resp | aFailureBlock value: (resp content)]!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 14:23:23'!
createCartFor: aUser password: aPassword onSuccess: aSuccessBlock onFailure: aFailureBlock  

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	self endPoint: '/createCart' withDict: fieldDict  
		onSuccess: [:resp | aSuccessBlock value:(WebUtils jsonDecode: ((resp content) readStream)).] 
		onFailure: [:resp | aFailureBlock value: (resp content)]! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'IC & VW 6/22/2023 14:23:23' prior: 50670997!
createCart

	restInterface createCartFor: 'hernan' password: 'smalltalk' 
							onSuccess: [:cartId | cartIds add: cartId. self triggerEvent: #newCartIdArrived]
							onFailure: [:errorMessage | self inform: errorMessage].
	! !

!methodRemoval: TusLibrosClientRestInterface #createCartFor:password:onSuccess:OnFailure: stamp: 'IC & VW 6/22/2023 14:23:23'!
createCartFor: aUser password: aPassword onSuccess: aSuccessBlock OnFailure: aFailureBlock  

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	self endPoint: '/createCart' withDict: fieldDict  
		onSuccess: [:resp | aSuccessBlock value:(WebUtils jsonDecode: ((resp content) readStream)).] 
		onFailure: [:resp | aFailureBlock value: (resp content)]!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'IC & VW 6/22/2023 14:23:30'!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId onSuccess: aSuccessBlock onFailure: aFailureBlock  

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	self endPoint: '/addToCart' withDict: fieldDict  
		onSuccess: [:resp | aSuccessBlock value:(WebUtils jsonDecode: ((resp content) readStream)).] 
		onFailure: [:resp | aFailureBlock value: (resp content)]! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'IC & VW 6/22/2023 14:23:30' prior: 50670947!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId 
				     onSuccess: [:param |self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId).] 
					onFailure: [:errorMessage | self inform: errorMessage]
		]! !

!methodRemoval: TusLibrosClientRestInterface #add:of:toCartIdentifiedAs:onSuccess:OnFailure: stamp: 'IC & VW 6/22/2023 14:23:30'!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId onSuccess: aSuccessBlock OnFailure: aFailureBlock  

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	self endPoint: '/addToCart' withDict: fieldDict  
		onSuccess: [:resp | aSuccessBlock value:(WebUtils jsonDecode: ((resp content) readStream)).] 
		onFailure: [:resp | aFailureBlock value: (resp content)]!

----SNAPSHOT----(22 June 2023 14:23:54) CuisUniversity-5832.image priorSource: 10856791!

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.
!

----SNAPSHOT----(22 June 2023 14:24:34) CuisUniversity-5832.image priorSource: 10865922!