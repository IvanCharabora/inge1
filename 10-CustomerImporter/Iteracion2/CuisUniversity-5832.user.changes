

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (27 June 2023 22:25:20) as C:\Users\Ivo\Desktop\uba\inge1\cuises\windows64\CuisUniversity-5832.image!


----End fileIn of C:\Users\Ivo\Desktop\uba\inge1\inge1\10-CustomerImporter\Iteracion2\CustomerImporter.st----!

----SNAPSHOT----(27 June 2023 22:26:44) CuisUniversity-5832.image priorSource: 9366758!
!Address methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624671!
streetNumber

	^streetNumber ! !
!Address methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624667!
streetName: aStreetName

	streetName := aStreetName ! !
!Address methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624656!
province: aProvince

	province := aProvince
	! !
!Address methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624675!
streetNumber: aStreetNumber

	streetNumber := aStreetNumber ! !
!Address methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624682!
town: aTown

	town := aTown! !
!Address methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624664!
streetName

	^streetName ! !
!Address methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624679!
town

	^town! !
!Address methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624689!
zipCode: aZipCode

	zipCode := aZipCode! !
!Address methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624653!
province

	^province! !
!Address methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624660!
isAt: aStreetName

	^streetName = aStreetName ! !
!Address methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624686!
zipCode

	^zipCode! !
!Customer methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624737!
identificationNumber

	^identificationNumber ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624741!
identificationNumber: anIdentificationNumber

	identificationNumber := anIdentificationNumber! !
!Customer methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624747!
identificationType

	^identificationType ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624757 overrides: 16920235!
initialize

	super initialize.
	addresses := OrderedCollection new.! !
!Customer methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624751!
identificationType: anIdentificationType

	identificationType := anIdentificationType! !
!Customer methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624723!
firstName

	^firstName ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624709!
addAddress: anAddress

	addresses add: anAddress ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624720!
addresses

	^ addresses! !
!Customer methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624726!
firstName: aName

	firstName := aName! !
!Customer methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624713!
addressAt: aStreetName ifNone: aNoneBlock

	^addresses detect: [ :address | address isAt: aStreetName ] ifNone: aNoneBlock ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624730!
lastName

	^lastName ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624733!
lastName: aLastName

	lastName := aLastName
! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624837!
isAddressData

	^ data first = 'A'! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624777!
initializeFrom: aReadStream into: aSession
	session := aSession.
	readStream := aReadStream.! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624823!
getNextLineAndHasLinesLeft

	line := readStream nextLine.
	^ line notNil.! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624846 overrides: 16902254!
value
	
	"self checkStreamIsEmpty."
	[ self getNextLineAndHasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624783!
addAddress

	| newAddress |
	(data size = 6) ifFalse: [self class streamWithAddressWithInvalidAmountOfFieldsError ].
	newCustomer ifNil: [self class streamWithAddressForNoCustomerError ].
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: data second.
	newAddress streetNumber: data third asNumber .
	newAddress town: data fourth.
	newAddress zipCode: data fifth asNumber .
	newAddress province: data sixth! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624800!
addAndPersistCustomer 

	(data size = 5) ifFalse: [self class streamWithCustomerWithInvalidAmountOfFieldsError].
	newCustomer  := Customer new.
	newCustomer firstName: data second.
	newCustomer lastName: data third.
	newCustomer identificationType: data fourth.
	newCustomer identificationNumber: data fifth.
	
	session persist: newCustomer.! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624814!
checkStreamIsEmpty

	^ [readStream isEmpty] ifTrue: [self error: 'a']! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624819!
createRecord

	^ data := line findTokens: $,! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624841!
isCustomerData

	^ data first =  'C'! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:57' prior: 50624828!
importRecord

	(self isCustomerData) ifTrue: [ ^	self addAndPersistCustomer.].
	(self isAddressData) ifTrue: [ ^self addAddress].
	self class streamWithInvalidPrefixError.! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624904!
streamWithCustomerWithInvalidAmountOfFieldsError
	self error: self streamWithCustomerWithInvalidAmountOfFieldsErrorMessage.! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624924!
streamWithDoubleValidPrefixErrorMessage
	'No podes arrancar con AAAAAAAAAAA'! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624930!
streamWithInvalidPrefixError
	self error: self streamWithInvalidPrefixErrorMessage.! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624868!
emptyStreamError
	self error: self emptyStreamErrorMessage.! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624936!
streamWithInvalidPrefixErrorMessage
	'No podes arrancar con el pie izquierdo'! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624942!
valueFrom: aReadStream into: aSession

	^(self from: aReadStream into: aSession) value! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624890!
streamWithAddressWithInvalidAmountOfFieldsError
	self error: self streamWithAddressWithInvalidAmountOfFieldsErrorMessage.! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624911!
streamWithCustomerWithInvalidAmountOfFieldsErrorMessage
	'No podes importar a un chabon con otra cantidad de fields'! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624918!
streamWithDoubleValidPrefixError
	self error: self streamWithDoubleValidPrefixErrorMessage.! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624862!
from: aReadStream into: aSession
	^self new initializeFrom: aReadStream into: aSession! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624873!
emptyStreamErrorMessage
	'No se importo nada crack'! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624884!
streamWithAddressForNoCustomerErrorMessage
	'No podes arrancar con una direcc capo'! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624897!
streamWithAddressWithInvalidAmountOfFieldsErrorMessage
	'No podes importar a una direcc con otra cantidad de fields'! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624878!
streamWithAddressForNoCustomerError
	self error: self streamWithAddressForNoCustomerErrorMessage.! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624965!
commit

	(tables at: Customer ifAbsent: [#()]) do: [ :aCustomer | self persistAddressesOf: aCustomer ]
	! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624986!
objectsOfType: aType

	^ tables at: aType ifAbsent: [ #() ]! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624971!
close

	! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50625008!
persist: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624991!
persistAddressesOf: anObjectWithAddresses

	anObjectWithAddresses addresses do: [ :anAddress | self persist: anAddress ]
	! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624998!
initializeFor: aConfiguration

	configuration := aConfiguration.
	tables := Dictionary new.
	id := 0.! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50625004!
newIdFor: anObject

	id := id + 1.
	^id! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50625025!
selectAllOfType: aType

	self delay.
	^(self objectsOfType: aType) copy ! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624981!
delay

	(Delay forMilliseconds: 100) wait! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624961!
beginTransaction

	! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50625019!
select: aCondition ofType: aType

	self delay.
	^(self objectsOfType: aType) select: aCondition ! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624975!
defineIdOf: anObject

	anObject instVarNamed: 'id' put: (self newIdFor: anObject).! !
!DataBaseSession class methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50625039!
for: aConfiguration

	^self new initializeFor: aConfiguration! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624445!
test07ImportFromStreamWithCustomerWithMoreFields
	
	self should: [CustomerImporter valueFrom: self customerWithMoreFieldsImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter streamWithCustomerWithInvalidAmountOfFieldsErrorMessage ].
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624579!
addressWithLessFieldsImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,Mi Casa,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624397!
test03ImportFromStreamWithInvalidPrefix
	
	self should: [CustomerImporter valueFrom: self invalidPrefixImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter streamWithInvalidPrefixErrorMessage ].
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624570!
addressForNoCustomerImportData

	^ ReadStream on:
'A,San Martin,3322,Olivos,1636,BsAs
C,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624528!
assertNoCustomersWasImported
	
	^true! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624390!
test02ImportFromEmptyStream
	
	CustomerImporter valueFrom: self emptyImportData into: session.
	self assert: self assertNoCustomersWasImported
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624560!
customerWithIdentificationType: anIdType number: anIdNumber

	^ (session
		select: [ :aCustomer | aCustomer identificationType = anIdType and: [ aCustomer identificationNumber = anIdNumber ]]
		ofType: Customer) anyOne! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624617!
emptyImportData

	^ ReadStream on: ''! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624420!
test05ImportFromStreamWithAddressForNoCustomer
	
	self should: [CustomerImporter valueFrom: self addressForNoCustomerImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter streamWithAddressForNoCustomerErrorMessage ].
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624490!
assertCustomerWithIdentificationType: anIdType number: anIdNumber hasFirstName: aFirstName lastName: aLastName

	| importedCustomer |

	importedCustomer := self customerWithIdentificationType: anIdType number: anIdNumber.

	self assert: aFirstName equals: importedCustomer firstName.
	self assert: aLastName equals: importedCustomer lastName.
	self assert: anIdType equals: importedCustomer identificationType.
	self assert: anIdNumber equals: importedCustomer identificationNumber.

	^importedCustomer

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624532!
assertPepeSanchezWasImportedCorrecty

	| importedCustomer |

	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assertAddressOf: importedCustomer at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	self assertAddressOf: importedCustomer at: 'Maipu' hasNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'.


	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624509!
assertImportedRightNumberOfCustomers

	^ self assert: 2 equals: (session selectAllOfType: Customer) size! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624515!
assertJuanPerezWasImportedCorrectly

	| importedCustomer |

	importedCustomer := self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez'.
	self assertAddressOf: importedCustomer at: 'Alem' hasNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624549 overrides: 16961394!
setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624598!
customerWithMoreFieldsImportData

	^ ReadStream on:
'C,Pepe,Sanchez,A+,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624621!
invalidPrefixImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
V,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624608!
doubleValidPrefixImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
AA,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624630!
validImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624589!
customerWithLessFieldsImportData

	^ ReadStream on:
'C,Pepe,,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624556 overrides: 16961402!
tearDown

	session commit.
	session close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624408!
test04ImportFromStreamWithDoubleValidPrefix
	
	self should: [CustomerImporter valueFrom: self doubleValidPrefixImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter streamWithDoubleValidPrefixErrorMessage ].
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624432!
test06ImportFromStreamWithCustomerWithLessFields
	
	self should: [CustomerImporter valueFrom: self customerWithLessFieldsImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter streamWithCustomerWithInvalidAmountOfFieldsErrorMessage ].
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624458!
test08ImportFromStreamWithAddressWithInvalidAmountOfFields
	
	self should: [CustomerImporter valueFrom: self addressWithLessFieldsImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter streamWithAddressWithInvalidAmountOfFieldsErrorMessage ].
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624471!
assertAddressOf: importedCustomer at: aStreetName hasNumber: aNumber town: aTown zipCode: aZipCode province: aProvince

	| importedAddress |

	importedAddress := importedCustomer addressAt: aStreetName ifNone: [ self fail ].
	self assert: aStreetName equals: importedAddress streetName.
	self assert: aNumber equals: importedAddress streetNumber.
	self assert: aTown equals: importedAddress town.
	self assert: aZipCode equals: importedAddress zipCode.
	self assert: aProvince equals: importedAddress province.

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:26:58' prior: 50624380!
test01ImportFromValidStream

	CustomerImporter valueFrom: self validImportData into: session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !

----SNAPSHOT----(27 June 2023 22:27:36) CuisUniversity-5832.image priorSource: 9388690!

session selectAllOfType: Address!
!ImportTest methodsFor: 'customer' stamp: 'ic&vw 6/27/2023 22:28:42'!
numberOfCustomers

	^ (session selectAllOfType: Customer)size! !
!ImportTest methodsFor: 'assertions' stamp: 'ic&vw 6/27/2023 22:29:41' prior: 50625471!
assertNoCustomersWasImported
	
	^self assert: 0 equals: self numberOfCustomers! !
!ImportTest methodsFor: 'assertions' stamp: 'ic&vw 6/27/2023 22:30:14'!
assertImportedRightNumberOfCustomers: anAmountOfCustomersExpected

	^ self assert: 2 equals: (session selectAllOfType: Customer) size! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ic&vw 6/27/2023 22:30:14' prior: 50625692!
test01ImportFromValidStream

	CustomerImporter valueFrom: self validImportData into: session.

	self assertImportedRightNumberOfCustomers: 2.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !

!methodRemoval: ImportTest #assertImportedRightNumberOfCustomers stamp: 'ic&vw 6/27/2023 22:30:15'!
assertImportedRightNumberOfCustomers

	^ self assert: 2 equals: (session selectAllOfType: Customer) size!
!ImportTest methodsFor: 'assertions' stamp: 'ic&vw 6/27/2023 22:30:28' prior: 50625716!
assertImportedRightNumberOfCustomers: anAmountOfCustomersExpected

	^ self assert: anAmountOfCustomersExpected equals: self numberOfCustomers! !

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'ic&vw 6/27/2023 22:30:33'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'ic&vw 6/27/2023 22:32:00' prior: 50625476!
test02ImportFromEmptyStream
	
	CustomerImporter valueFrom: self emptyImportData into: session.
	self assertNoCustomersWasImported
	! !

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'ic&vw 6/27/2023 22:32:01'!
PASSED!

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'ic&vw 6/27/2023 22:32:02'!
PASSED!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'ic&vw 6/27/2023 22:32:02'!
PASSED!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'ic&vw 6/27/2023 22:32:02'!
PASSED!

!testRun: #ImportTest #test04ImportFromStreamWithDoubleValidPrefix stamp: 'ic&vw 6/27/2023 22:32:03'!
PASSED!

!testRun: #ImportTest #test05ImportFromStreamWithAddressForNoCustomer stamp: 'ic&vw 6/27/2023 22:32:03'!
PASSED!

!testRun: #ImportTest #test06ImportFromStreamWithCustomerWithLessFields stamp: 'ic&vw 6/27/2023 22:32:03'!
PASSED!

!testRun: #ImportTest #test07ImportFromStreamWithCustomerWithMoreFields stamp: 'ic&vw 6/27/2023 22:32:03'!
PASSED!

!testRun: #ImportTest #test08ImportFromStreamWithAddressWithInvalidAmountOfFields stamp: 'ic&vw 6/27/2023 22:32:03'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'ic&vw 6/27/2023 22:32:23' prior: 50625450!
test03ImportFromStreamWithInvalidPrefix
	
	self should: [CustomerImporter valueFrom: self invalidPrefixImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: CustomerImporter streamWithInvalidPrefixErrorMessage.
			self assertImportedRightNumberOfCustomers: 1].
	! !

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'ic&vw 6/27/2023 22:32:24'!
PASSED!

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'ic&vw 6/27/2023 22:32:25'!
PASSED!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'ic&vw 6/27/2023 22:32:25'!
PASSED!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'ic&vw 6/27/2023 22:32:25'!
PASSED!

!testRun: #ImportTest #test04ImportFromStreamWithDoubleValidPrefix stamp: 'ic&vw 6/27/2023 22:32:26'!
PASSED!

!testRun: #ImportTest #test05ImportFromStreamWithAddressForNoCustomer stamp: 'ic&vw 6/27/2023 22:32:26'!
PASSED!

!testRun: #ImportTest #test06ImportFromStreamWithCustomerWithLessFields stamp: 'ic&vw 6/27/2023 22:32:26'!
PASSED!

!testRun: #ImportTest #test07ImportFromStreamWithCustomerWithMoreFields stamp: 'ic&vw 6/27/2023 22:32:26'!
PASSED!

!testRun: #ImportTest #test08ImportFromStreamWithAddressWithInvalidAmountOfFields stamp: 'ic&vw 6/27/2023 22:32:26'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'ic&vw 6/27/2023 22:32:42' prior: 50625632!
test04ImportFromStreamWithDoubleValidPrefix
	
	self should: [CustomerImporter valueFrom: self doubleValidPrefixImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: CustomerImporter streamWithDoubleValidPrefixErrorMessage.
			self assertImportedRightNumberOfCustomers: 1].
	! !

!testRun: #ImportTest #test04ImportFromStreamWithDoubleValidPrefix stamp: 'ic&vw 6/27/2023 22:32:43'!
PASSED!

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'ic&vw 6/27/2023 22:32:43'!
PASSED!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'ic&vw 6/27/2023 22:32:44'!
PASSED!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'ic&vw 6/27/2023 22:32:44'!
PASSED!

!testRun: #ImportTest #test04ImportFromStreamWithDoubleValidPrefix stamp: 'ic&vw 6/27/2023 22:32:44'!
PASSED!

!testRun: #ImportTest #test05ImportFromStreamWithAddressForNoCustomer stamp: 'ic&vw 6/27/2023 22:32:44'!
PASSED!

!testRun: #ImportTest #test06ImportFromStreamWithCustomerWithLessFields stamp: 'ic&vw 6/27/2023 22:32:44'!
PASSED!

!testRun: #ImportTest #test07ImportFromStreamWithCustomerWithMoreFields stamp: 'ic&vw 6/27/2023 22:32:44'!
PASSED!

!testRun: #ImportTest #test08ImportFromStreamWithAddressWithInvalidAmountOfFields stamp: 'ic&vw 6/27/2023 22:32:45'!
PASSED!

self!
!ImportTest methodsFor: 'tests' stamp: 'ic&vw 6/27/2023 22:33:01' prior: 50625499!
test05ImportFromStreamWithAddressForNoCustomer
	
	self should: [CustomerImporter valueFrom: self addressForNoCustomerImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: CustomerImporter streamWithAddressForNoCustomerErrorMessage.
			self assertNoCustomersWasImported ].
	! !

!testRun: #ImportTest #test05ImportFromStreamWithAddressForNoCustomer stamp: 'ic&vw 6/27/2023 22:33:02'!
PASSED!

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'ic&vw 6/27/2023 22:33:02'!
PASSED!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'ic&vw 6/27/2023 22:33:03'!
PASSED!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'ic&vw 6/27/2023 22:33:03'!
PASSED!

!testRun: #ImportTest #test04ImportFromStreamWithDoubleValidPrefix stamp: 'ic&vw 6/27/2023 22:33:03'!
PASSED!

!testRun: #ImportTest #test05ImportFromStreamWithAddressForNoCustomer stamp: 'ic&vw 6/27/2023 22:33:03'!
PASSED!

!testRun: #ImportTest #test06ImportFromStreamWithCustomerWithLessFields stamp: 'ic&vw 6/27/2023 22:33:03'!
PASSED!

!testRun: #ImportTest #test07ImportFromStreamWithCustomerWithMoreFields stamp: 'ic&vw 6/27/2023 22:33:03'!
PASSED!

!testRun: #ImportTest #test08ImportFromStreamWithAddressWithInvalidAmountOfFields stamp: 'ic&vw 6/27/2023 22:33:03'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'ic&vw 6/27/2023 22:33:26' prior: 50625645!
test06ImportFromStreamWithCustomerWithLessFields
	
	self should: [CustomerImporter valueFrom: self customerWithLessFieldsImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 
			CustomerImporter streamWithCustomerWithInvalidAmountOfFieldsErrorMessage.
			self assertImportedRightNumberOfCustomers: 1].
	! !
!ImportTest methodsFor: 'tests' stamp: 'ic&vw 6/27/2023 22:33:28' prior: 50625924!
test06ImportFromStreamWithCustomerWithLessFields
	
	self should: [CustomerImporter valueFrom: self customerWithLessFieldsImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 
			CustomerImporter streamWithCustomerWithInvalidAmountOfFieldsErrorMessage.
			self assertImportedRightNumberOfCustomers: 0].
	! !

!testRun: #ImportTest #test06ImportFromStreamWithCustomerWithLessFields stamp: 'ic&vw 6/27/2023 22:33:29'!
PASSED!

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'ic&vw 6/27/2023 22:33:29'!
PASSED!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'ic&vw 6/27/2023 22:33:30'!
PASSED!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'ic&vw 6/27/2023 22:33:30'!
PASSED!

!testRun: #ImportTest #test04ImportFromStreamWithDoubleValidPrefix stamp: 'ic&vw 6/27/2023 22:33:30'!
PASSED!

!testRun: #ImportTest #test05ImportFromStreamWithAddressForNoCustomer stamp: 'ic&vw 6/27/2023 22:33:30'!
PASSED!

!testRun: #ImportTest #test06ImportFromStreamWithCustomerWithLessFields stamp: 'ic&vw 6/27/2023 22:33:31'!
PASSED!

!testRun: #ImportTest #test07ImportFromStreamWithCustomerWithMoreFields stamp: 'ic&vw 6/27/2023 22:33:31'!
PASSED!

!testRun: #ImportTest #test08ImportFromStreamWithAddressWithInvalidAmountOfFields stamp: 'ic&vw 6/27/2023 22:33:31'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'ic&vw 6/27/2023 22:33:32' prior: 50625939!
test06ImportFromStreamWithCustomerWithLessFields
	
	self should: [CustomerImporter valueFrom: self customerWithLessFieldsImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 
			CustomerImporter streamWithCustomerWithInvalidAmountOfFieldsErrorMessage.
			self assertImportedRightNumberOfCustomers: 1].
	! !

!testRun: #ImportTest #test06ImportFromStreamWithCustomerWithLessFields stamp: 'ic&vw 6/27/2023 22:33:33'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'ic&vw 6/27/2023 22:33:42' prior: 50625985!
test06ImportFromStreamWithCustomerWithLessFields
	
	self should: [CustomerImporter valueFrom: self customerWithLessFieldsImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 
			CustomerImporter streamWithCustomerWithInvalidAmountOfFieldsErrorMessage.
			self assertNoCustomersWasImported ].
	! !
!ImportTest methodsFor: 'tests' stamp: 'ic&vw 6/27/2023 22:33:53' prior: 50625427!
test07ImportFromStreamWithCustomerWithMoreFields
	
	self should: [CustomerImporter valueFrom: self customerWithMoreFieldsImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 
			CustomerImporter streamWithCustomerWithInvalidAmountOfFieldsErrorMessage.
			self assertImportedRightNumberOfCustomers: 1 ].
	! !

!testRun: #ImportTest #test07ImportFromStreamWithCustomerWithMoreFields stamp: 'ic&vw 6/27/2023 22:33:53'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'ic&vw 6/27/2023 22:34:05' prior: 50626017!
test07ImportFromStreamWithCustomerWithMoreFields
	
	self should: [CustomerImporter valueFrom: self customerWithMoreFieldsImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 
			CustomerImporter streamWithCustomerWithInvalidAmountOfFieldsErrorMessage.
			self assertNoCustomersWasImported ].
	! !
!ImportTest methodsFor: 'tests' stamp: 'ic&vw 6/27/2023 22:34:27' prior: 50625658!
test08ImportFromStreamWithAddressWithInvalidAmountOfFields
	
	self should: [CustomerImporter valueFrom: self addressWithLessFieldsImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 
			CustomerImporter streamWithAddressWithInvalidAmountOfFieldsErrorMessage.
			 self assertImportedRightNumberOfCustomers: 1].
	! !

!testRun: #ImportTest #test08ImportFromStreamWithAddressWithInvalidAmountOfFields stamp: 'ic&vw 6/27/2023 22:34:28'!
PASSED!

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'ic&vw 6/27/2023 22:34:29'!
PASSED!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'ic&vw 6/27/2023 22:34:29'!
PASSED!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'ic&vw 6/27/2023 22:34:29'!
PASSED!

!testRun: #ImportTest #test04ImportFromStreamWithDoubleValidPrefix stamp: 'ic&vw 6/27/2023 22:34:30'!
PASSED!

!testRun: #ImportTest #test05ImportFromStreamWithAddressForNoCustomer stamp: 'ic&vw 6/27/2023 22:34:30'!
PASSED!

!testRun: #ImportTest #test06ImportFromStreamWithCustomerWithLessFields stamp: 'ic&vw 6/27/2023 22:34:30'!
PASSED!

!testRun: #ImportTest #test07ImportFromStreamWithCustomerWithMoreFields stamp: 'ic&vw 6/27/2023 22:34:30'!
PASSED!

!testRun: #ImportTest #test08ImportFromStreamWithAddressWithInvalidAmountOfFields stamp: 'ic&vw 6/27/2023 22:34:30'!
PASSED!

----SNAPSHOT----(27 June 2023 22:34:35) CuisUniversity-5832.image priorSource: 9409636!
!CustomerImporter methodsFor: 'evaluating' stamp: 'ic&vw 6/27/2023 22:38:00'!
validateAmountOfAddressFields

	^ (data size = 6) ifFalse: [self class streamWithAddressWithInvalidAmountOfFieldsError ]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ic&vw 6/27/2023 22:38:00' prior: 50625189!
addAddress

	| newAddress |
	self validateAmountOfAddressFields.
	newCustomer ifNil: [self class streamWithAddressForNoCustomerError ].
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: data second.
	newAddress streetNumber: data third asNumber .
	newAddress town: data fourth.
	newAddress zipCode: data fifth asNumber .
	newAddress province: data sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ic&vw 6/27/2023 22:38:23'!
validateCustomerNotNil

	^ newCustomer ifNil: [self class streamWithAddressForNoCustomerError ]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ic&vw 6/27/2023 22:38:23' prior: 50626105!
addAddress

	| newAddress |
	self validateAmountOfAddressFields.
	self validateCustomerNotNil.
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: data second.
	newAddress streetNumber: data third asNumber .
	newAddress town: data fourth.
	newAddress zipCode: data fifth asNumber .
	newAddress province: data sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ic&vw 6/27/2023 22:39:10'!
validateAmountOfCustomerFields

	^ (data size = 5) ifFalse: [self class streamWithCustomerWithInvalidAmountOfFieldsError]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ic&vw 6/27/2023 22:39:10' prior: 50625207!
addAndPersistCustomer 

	self validateAmountOfCustomerFields.
	newCustomer  := Customer new.
	newCustomer firstName: data second.
	newCustomer lastName: data third.
	newCustomer identificationType: data fourth.
	newCustomer identificationNumber: data fifth.
	
	session persist: newCustomer.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ic&vw 6/27/2023 22:39:30'!
validateStreamIsEmpty

	^ [readStream isEmpty] ifTrue: [self error: 'a']! !

!methodRemoval: CustomerImporter #checkStreamIsEmpty stamp: 'ic&vw 6/27/2023 22:39:30'!
checkStreamIsEmpty

	^ [readStream isEmpty] ifTrue: [self error: 'a']!

!methodRemoval: CustomerImporter #validateStreamIsEmpty stamp: 'ic&vw 6/27/2023 22:41:46'!
validateStreamIsEmpty

	^ [readStream isEmpty] ifTrue: [self error: 'a']!
!CustomerImporter methodsFor: 'evaluating' stamp: 'ic&vw 6/27/2023 22:41:53' prior: 50625181 overrides: 16902254!
value
	
	[ self getNextLineAndHasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !
!CustomerImporter class methodsFor: 'error messages' stamp: 'ic&vw 6/27/2023 22:43:07' prior: 50625316!
emptyStreamErrorMessage
	'No hay nada para importar'! !
!CustomerImporter class methodsFor: 'error messages' stamp: 'ic&vw 6/27/2023 22:43:27' prior: 50625322!
streamWithAddressForNoCustomerErrorMessage
	'No se puede cargar direccion sin previamente haber asignado un cliente'! !
!CustomerImporter class methodsFor: 'error messages' stamp: 'ic&vw 6/27/2023 22:43:45' prior: 50625329!
streamWithAddressWithInvalidAmountOfFieldsErrorMessage
	'Invalida cantidad de campos en la direccion'! !
!CustomerImporter class methodsFor: 'error messages' stamp: 'ic&vw 6/27/2023 22:43:54' prior: 50625294!
streamWithCustomerWithInvalidAmountOfFieldsErrorMessage
	'No '! !
!CustomerImporter class methodsFor: 'error messages' stamp: 'ic&vw 6/27/2023 22:44:03' prior: 50626196!
streamWithAddressWithInvalidAmountOfFieldsErrorMessage
	'Invalida cantidad de campos en la direccion'! !
!CustomerImporter class methodsFor: 'error messages' stamp: 'ic&vw 6/27/2023 22:44:09' prior: 50626203!
streamWithCustomerWithInvalidAmountOfFieldsErrorMessage
	'Invalida cantidad de campos en el cliente'! !
!CustomerImporter class methodsFor: 'error messages' stamp: 'ic&vw 6/27/2023 22:44:21' prior: 50625254!
streamWithDoubleValidPrefixErrorMessage
	'Invalido prefijo'! !
!CustomerImporter class methodsFor: 'error messages' stamp: 'ic&vw 6/27/2023 22:44:28' prior: 50626223!
streamWithDoubleValidPrefixErrorMessage
	'Invalido identificador de direccion o cliente'! !
!CustomerImporter class methodsFor: 'error messages' stamp: 'ic&vw 6/27/2023 22:44:47' prior: 50625273!
streamWithInvalidPrefixErrorMessage
	'Invalido identificador de direccion o cliente'! !

!methodRemoval: CustomerImporter class #streamWithDoubleValidPrefixError stamp: 'ic&vw 6/27/2023 22:45:12'!
streamWithDoubleValidPrefixError
	self error: self streamWithDoubleValidPrefixErrorMessage.!
!ImportTest methodsFor: 'tests' stamp: 'ic&vw 6/27/2023 22:45:44' prior: 50625834!
test04ImportFromStreamWithDoubleValidPrefix
	
	self should: [CustomerImporter valueFrom: self doubleValidPrefixImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: CustomerImporter streamWithInvalidPrefixErrorMessage.
			self assertImportedRightNumberOfCustomers: 1].
	! !

!methodRemoval: CustomerImporter class #streamWithDoubleValidPrefixErrorMessage stamp: 'ic&vw 6/27/2023 22:45:54'!
streamWithDoubleValidPrefixErrorMessage
	'Invalido identificador de direccion o cliente'!

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'ic&vw 6/27/2023 22:45:58'!
PASSED!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'ic&vw 6/27/2023 22:45:58'!
PASSED!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'ic&vw 6/27/2023 22:45:58'!
PASSED!

!testRun: #ImportTest #test04ImportFromStreamWithDoubleValidPrefix stamp: 'ic&vw 6/27/2023 22:45:59'!
PASSED!

!testRun: #ImportTest #test05ImportFromStreamWithAddressForNoCustomer stamp: 'ic&vw 6/27/2023 22:45:59'!
PASSED!

!testRun: #ImportTest #test06ImportFromStreamWithCustomerWithLessFields stamp: 'ic&vw 6/27/2023 22:45:59'!
PASSED!

!testRun: #ImportTest #test07ImportFromStreamWithCustomerWithMoreFields stamp: 'ic&vw 6/27/2023 22:45:59'!
PASSED!

!testRun: #ImportTest #test08ImportFromStreamWithAddressWithInvalidAmountOfFields stamp: 'ic&vw 6/27/2023 22:45:59'!
PASSED!

----SNAPSHOT----(27 June 2023 22:46:04) CuisUniversity-5832.image priorSource: 9422220!

----SNAPSHOT----(27 June 2023 22:47:46) CuisUniversity-5832.image priorSource: 9428625!