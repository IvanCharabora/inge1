

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (26 June 2023 19:09:26) as /home/valewodka/Downloads/linux64/CuisUniversity-5832.image!


----End fileIn of /home/valewodka/Downloads/linux64/CustomerImporter-35.st----!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:12:59'!
addAddressFrom: newCustomer in: line

	| addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:12:59' prior: 50624631 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ self addAddressFrom: newCustomer in: line ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:15:04'!
addCustomer: customerData in: newCustomer

	newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:15:04' prior: 50624798 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			self addCustomer: customerData in: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ self addAddressFrom: newCustomer in: line ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:15:19'!
addCustomerFrom: customerData in: newCustomer

	newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IC&VW 6/26/2023 19:15:19' prior: 50624833 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			self addCustomerFrom: customerData in: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ self addAddressFrom: newCustomer in: line ].

		line := readStream nextLine. ].

	! !

!methodRemoval: CustomerImporter #addCustomer:in: stamp: 'IC&VW 6/26/2023 19:15:19'!
addCustomer: customerData in: newCustomer

	newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:15:50' prior: 50624862 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := 	self addCustomerFrom: customerData in: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ self addAddressFrom: newCustomer in: line ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:17:26' prior: 50624849!
addCustomerFrom: customerData in: newCustomer

	| newCustomer2 |
	newCustomer2  := Customer new.
	newCustomer2 firstName: customerData second.
	newCustomer2 lastName: customerData third.
	newCustomer2 identificationType: customerData fourth.
	newCustomer2 identificationNumber: customerData fifth.
	session persist: newCustomer2! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:17:34'!
addCustomerFrom: customerData 

	| newCustomer2 |
	newCustomer2  := Customer new.
	newCustomer2 firstName: customerData second.
	newCustomer2 lastName: customerData third.
	newCustomer2 identificationType: customerData fourth.
	newCustomer2 identificationNumber: customerData fifth.
	session persist: newCustomer2! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IC&VW 6/26/2023 19:17:34' prior: 50624891 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := 	self addCustomerFrom: customerData ].

		(line beginsWith: 'A') ifTrue: [ self addAddressFrom: newCustomer in: line ].

		line := readStream nextLine. ].

	! !

!methodRemoval: CustomerImporter #addCustomerFrom:in: stamp: 'IC&VW 6/26/2023 19:17:34'!
addCustomerFrom: customerData in: newCustomer

	| newCustomer2 |
	newCustomer2  := Customer new.
	newCustomer2 firstName: customerData second.
	newCustomer2 lastName: customerData third.
	newCustomer2 identificationType: customerData fourth.
	newCustomer2 identificationNumber: customerData fifth.
	session persist: newCustomer2!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:17:48' prior: 50624920!
addCustomerFrom: customerData 

	| newCustomer |
	newCustomer  := Customer new.
	newCustomer firstName: customerData second.
	newCustomer lastName: customerData third.
	newCustomer identificationType: customerData fourth.
	newCustomer identificationNumber: customerData fifth.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:17:58' prior: 50624934 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := 	self addCustomerFrom: customerData.
			session persist: newCustomer].

		(line beginsWith: 'A') ifTrue: [ self addAddressFrom: newCustomer in: line ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:18:06' prior: 50624963!
addCustomerFrom: customerData 

	| newCustomer |
	newCustomer  := Customer new.
	newCustomer firstName: customerData second.
	newCustomer lastName: customerData third.
	newCustomer identificationType: customerData fourth.
	newCustomer identificationNumber: customerData fifth.
	^newCustomer.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:18:55' prior: 50624781!
addAddressFrom: newCustomer in: line

	| addressData newAddress |
	addressData := line findTokens: $,.
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: addressData second.
	newAddress streetNumber: addressData third asNumber .
	newAddress town: addressData fourth.
	newAddress zipCode: addressData fifth asNumber .
	newAddress province: addressData sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:20:29' prior: 50624976 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := 	self addCustomerFrom: customerData.
			session persist: newCustomer].

		(line beginsWith: 'A') ifTrue: [ |addressData|
			addressData := line findTokens: $,.
			self addAddressFrom: newCustomer in: line ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:21:10' prior: 50625006!
addAddressFrom: addressData in: newCustomer

	| newAddress |
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: addressData second.
	newAddress streetNumber: addressData third asNumber .
	newAddress town: addressData fourth.
	newAddress zipCode: addressData fifth asNumber .
	newAddress province: addressData sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:21:24' prior: 50625022 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := 	self addCustomerFrom: customerData.
			session persist: newCustomer].

		(line beginsWith: 'A') ifTrue: [ |addressData|
			addressData := line findTokens: $,.
			self addAddressFrom: line in: newCustomer].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:21:32' prior: 50625055 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := 	self addCustomerFrom: customerData.
			session persist: newCustomer].

		(line beginsWith: 'A') ifTrue: [ |addressData|
			addressData := line findTokens: $,.
			self addAddressFrom: addressData in: newCustomer].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 19:21:36'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:25:30' prior: 50625074 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line data |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [
			newCustomer := 	self addCustomerFrom: data.
			session persist: newCustomer].

		(line beginsWith: 'A') ifTrue: [
			self addAddressFrom: data in: newCustomer].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 19:25:33'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:26:46' prior: 50625096 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line data |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [
			newCustomer := 	self addCustomerFrom: data.
			].

		(line beginsWith: 'A') ifTrue: [
			self addAddressFrom: data in: newCustomer].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:26:56' prior: 50624993!
addCustomerFrom: customerData 

	| newCustomer |
	newCustomer  := Customer new.
	newCustomer firstName: customerData second.
	newCustomer lastName: customerData third.
	newCustomer identificationType: customerData fourth.
	newCustomer identificationNumber: customerData fifth.
	
	session persist: newCustomer
	^newCustomer.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:27:21'!
addAndPersistCustomerFrom: customerData 

	| newCustomer |
	newCustomer  := Customer new.
	newCustomer firstName: customerData second.
	newCustomer lastName: customerData third.
	newCustomer identificationType: customerData fourth.
	newCustomer identificationNumber: customerData fifth.
	
	session persist: newCustomer
	^newCustomer.! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IC&VW 6/26/2023 19:27:21' prior: 50625115 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line data |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [
			newCustomer := 	self addAndPersistCustomerFrom: data.
			].

		(line beginsWith: 'A') ifTrue: [
			self addAddressFrom: data in: newCustomer].

		line := readStream nextLine. ].

	! !

!methodRemoval: CustomerImporter #addCustomerFrom: stamp: 'IC&VW 6/26/2023 19:27:21'!
addCustomerFrom: customerData 

	| newCustomer |
	newCustomer  := Customer new.
	newCustomer firstName: customerData second.
	newCustomer lastName: customerData third.
	newCustomer identificationType: customerData fourth.
	newCustomer identificationNumber: customerData fifth.
	
	session persist: newCustomer
	^newCustomer.!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:27:36' prior: 50625158 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line data |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ newCustomer := 	self addAndPersistCustomerFrom: data.].

		(line beginsWith: 'A') ifTrue: [ self addAddressFrom: data in: newCustomer].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:35:00'!
addAddressFrom: addressData to: newCustomer

	| newAddress |
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: addressData second.
	newAddress streetNumber: addressData third asNumber .
	newAddress town: addressData fourth.
	newAddress zipCode: addressData fifth asNumber .
	newAddress province: addressData sixth! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IC&VW 6/26/2023 19:35:00' prior: 50625187 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line data |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ newCustomer := 	self addAndPersistCustomerFrom: data.].

		(line beginsWith: 'A') ifTrue: [ self addAddressFrom: data to: newCustomer].

		line := readStream nextLine. ].

	! !

!methodRemoval: CustomerImporter #addAddressFrom:in: stamp: 'IC&VW 6/26/2023 19:35:00'!
addAddressFrom: addressData in: newCustomer

	| newAddress |
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: addressData second.
	newAddress streetNumber: addressData third asNumber .
	newAddress town: addressData fourth.
	newAddress zipCode: addressData fifth asNumber .
	newAddress province: addressData sixth!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:35:20' prior: 50625201!
addAddressFrom: anAddressData to: aCustomer

	| newAddress |
	newAddress := Address new.
	aCustomer addAddress: newAddress.
	newAddress streetName: anAddressData second.
	newAddress streetNumber: anAddressData third asNumber .
	newAddress town: anAddressData fourth.
	newAddress zipCode: anAddressData fifth asNumber .
	newAddress province: anAddressData sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:35:35' prior: 50625143!
addAndPersistCustomerFrom: aCustomerData 

	| newCustomer |
	newCustomer  := Customer new.
	newCustomer firstName: aCustomerData second.
	newCustomer lastName: aCustomerData third.
	newCustomer identificationType: aCustomerData fourth.
	newCustomer identificationNumber: aCustomerData fifth.
	
	session persist: newCustomer
	^newCustomer.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:36:36'!
isAddressLine: line

	^ line beginsWith: 'C'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:36:36' prior: 50625216 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line data |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		data := line findTokens: $,.
		(self isAddressLine: line) ifTrue: [ newCustomer := 	self addAndPersistCustomerFrom: data.].

		(line beginsWith: 'A') ifTrue: [ self addAddressFrom: data to: newCustomer].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:36:54'!
isCustomerLine: line

	^ line beginsWith: 'C'! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IC&VW 6/26/2023 19:36:54' prior: 50625280 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line data |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		data := line findTokens: $,.
		(self isCustomerLine: line) ifTrue: [ newCustomer := 	self addAndPersistCustomerFrom: data.].

		(line beginsWith: 'A') ifTrue: [ self addAddressFrom: data to: newCustomer].

		line := readStream nextLine. ].

	! !

!methodRemoval: CustomerImporter #isAddressLine: stamp: 'IC&VW 6/26/2023 19:36:54'!
isAddressLine: line

	^ line beginsWith: 'C'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:37:13'!
isAddressLine: line

	^ line beginsWith: 'A'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:37:13' prior: 50625300 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line data |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		data := line findTokens: $,.
		(self isCustomerLine: line) ifTrue: [ newCustomer := 	self addAndPersistCustomerFrom: data.].

		(self isAddressLine: line) ifTrue: [ self addAddressFrom: data to: newCustomer].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:38:47' prior: 50625325 overrides: 16902254!
value

	"
	self importCustomers
	"
	| line data |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		data := line findTokens: $,.
		[	|newCustomer|
			(self isCustomerLine: line) ifTrue: [ newCustomer := 	self addAndPersistCustomerFrom: data.].
			(self isAddressLine: line) ifTrue: [ self addAddressFrom: data to: newCustomer].
			].

		

		line := readStream nextLine. ].

	! !

----SNAPSHOT----(26 June 2023 19:50:50) CuisUniversity-5832.image priorSource: 9366758!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:51:44' prior: 50625341 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line data |

	[ line := readStream nextLine. ] whileTrue: [
		data := line findTokens: $,.
		(self isCustomerLine: line) ifTrue: [ newCustomer := 	self addAndPersistCustomerFrom: data.].
		(self isAddressLine: line) ifTrue: [ self addAddressFrom: data to: newCustomer].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 19:51:45'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 19:51:45'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:52:01' prior: 50625360 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line data |

	[ line := readStream nextLine. ] whileNotNil: [
		data := line findTokens: $,.
		(self isCustomerLine: line) ifTrue: [ newCustomer := 	self addAndPersistCustomerFrom: data.].
		(self isAddressLine: line) ifTrue: [ self addAddressFrom: data to: newCustomer].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 19:52:02'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 19:52:02'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:52:23' prior: 50625380 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line data |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		data := line findTokens: $,.
		(self isCustomerLine: line) ifTrue: [ newCustomer := 	self addAndPersistCustomerFrom: data.].
		(self isAddressLine: line) ifTrue: [ self addAddressFrom: data to: newCustomer].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 19:52:24'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 19:52:24'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:52:41' prior: 50625260!
addAndPersistCustomerFrom: aCustomerData 

	| newCustomer |
	newCustomer  := Customer new.
	newCustomer firstName: aCustomerData second.
	newCustomer lastName: aCustomerData third.
	newCustomer identificationType: aCustomerData fourth.
	newCustomer identificationNumber: aCustomerData fifth.
	
	session persist: newCustomer.
	^newCustomer.! !

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 19:52:42'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:53:04' prior: 50625400 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line data |

	[ line := readStream nextLine. ] whileNotNil: [
		data := line findTokens: $,.
		(self isCustomerLine: line) ifTrue: [ newCustomer := 	self addAndPersistCustomerFrom: data.].
		(self isAddressLine: line) ifTrue: [ self addAddressFrom: data to: newCustomer].

		 ].

	! !

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 19:53:06'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:53:24' prior: 50625437 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line data |

	[ line := readStream nextLine. ] whileNotNil: [
		data := line findTokens: $,.
		(self isCustomerLine: line) ifTrue: [ newCustomer := 	self addAndPersistCustomerFrom: data.].
		(self isAddressLine: line) ifTrue: [ self addAddressFrom: data to: newCustomer].
	].

	! !

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 19:53:25'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:55:48' prior: 50625454 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line data |

	[ line := readStream nextLine. ] whileNotNil: [
		data := line findTokens: $,.
		(self isCustomerLine: line) ifTrue: [ newCustomer := 	self addAndPersistCustomerFrom: data.].
		(self isAddressLine: line) ifTrue: [ self addAddressFrom: data to: newCustomer].
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:57:31' prior: 50625319!
isAddressLine: line2

	^ line2 beginsWith: 'A'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:57:35' prior: 50625294!
isCustomerLine: line2

	^ line2 beginsWith: 'C'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:58:16' prior: 50625471 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line line2 data |

	[ line2 := readStream nextLine. ] whileNotNil: [
		data := line2 findTokens: $,.
		(self isCustomerLine: line2) ifTrue: [ newCustomer := 	self addAndPersistCustomerFrom: data.].
		(self isAddressLine: line2) ifTrue: [ self addAddressFrom: data to: newCustomer].
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:58:47' prior: 50625496 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line2 data |

	[ line2 := readStream nextLine. ] whileNotNil: [
		data := line2 findTokens: $,.
		(self isCustomerLine: line2) ifTrue: [ newCustomer := 	self addAndPersistCustomerFrom: data.].
		(self isAddressLine: line2) ifTrue: [ self addAddressFrom: data to: newCustomer].
	].

	! !

Object subclass: #CustomerImporter
	instanceVariableNames: 'line session readStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'IC&VW 6/26/2023 19:58:57'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'line session readStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:59:30' prior: 50625485!
isAddressLine: line2

	^ line beginsWith: 'A'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:59:35'!
isAddressLine

	^ line beginsWith: 'A'! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IC&VW 6/26/2023 19:59:35' prior: 50625511 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line2 data |

	[ line2 := readStream nextLine. ] whileNotNil: [
		data := line2 findTokens: $,.
		(self isCustomerLine: line2) ifTrue: [ newCustomer := 	self addAndPersistCustomerFrom: data.].
		(self isAddressLine) ifTrue: [ self addAddressFrom: data to: newCustomer].
	].

	! !

!methodRemoval: CustomerImporter #isAddressLine: stamp: 'IC&VW 6/26/2023 19:59:35'!
isAddressLine: line2

	^ line beginsWith: 'A'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:59:49' prior: 50625490!
isCustomerLine: line2

	^ line beginsWith: 'C'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 19:59:57'!
isCustomerLine

	^ line beginsWith: 'C'! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IC&VW 6/26/2023 19:59:57' prior: 50625548 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line2 data |

	[ line2 := readStream nextLine. ] whileNotNil: [
		data := line2 findTokens: $,.
		(self isCustomerLine) ifTrue: [ newCustomer := 	self addAndPersistCustomerFrom: data.].
		(self isAddressLine) ifTrue: [ self addAddressFrom: data to: newCustomer].
	].

	! !

!methodRemoval: CustomerImporter #isCustomerLine: stamp: 'IC&VW 6/26/2023 19:59:57'!
isCustomerLine: line2

	^ line beginsWith: 'C'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:00:20' prior: 50625576 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer data |

	[ line := readStream nextLine. ] whileNotNil: [
		data := line findTokens: $,.
		(self isCustomerLine) ifTrue: [ newCustomer := 	self addAndPersistCustomerFrom: data.].
		(self isAddressLine) ifTrue: [ self addAddressFrom: data to: newCustomer].
	].

	! !

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:00:22'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:07:58' prior: 50625420!
addAndPersistCustomerFrom: aCustomerData 

	| newCustomer2 |
	newCustomer2  := Customer new.
	newCustomer2 firstName: aCustomerData second.
	newCustomer2 lastName: aCustomerData third.
	newCustomer2 identificationType: aCustomerData fourth.
	newCustomer2 identificationNumber: aCustomerData fifth.
	
	session persist: newCustomer2.
	^newCustomer2.! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IC&VW 6/26/2023 20:08:09' prior: 50625594 overrides: 16902254!
value

	"
	self importCustomers
	"
	|  data |

	[ line := readStream nextLine. ] whileNotNil: [
		data := line findTokens: $,.
		(self isCustomerLine) ifTrue: [ newCustomer := 	self addAndPersistCustomerFrom: data.].
		(self isAddressLine) ifTrue: [ self addAddressFrom: data to: newCustomer].
	].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'IC&VW 6/26/2023 20:08:09'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'line session readStream newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:08:21' prior: 50625625 overrides: 16902254!
value

	"
	self importCustomers
	"
	| data |

	[ line := readStream nextLine. ] whileNotNil: [
		data := line findTokens: $,.
		(self isCustomerLine) ifTrue: [ 	self addAndPersistCustomerFrom: data.].
		(self isAddressLine) ifTrue: [ self addAddressFrom: data to: newCustomer].
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:08:35' prior: 50625610!
addAndPersistCustomerFrom: aCustomerData 

	| newCustomer2 |
	newCustomer2  := Customer new.
	newCustomer2 firstName: aCustomerData second.
	newCustomer2 lastName: aCustomerData third.
	newCustomer2 identificationType: aCustomerData fourth.
	newCustomer2 identificationNumber: aCustomerData fifth.
	
	session persist: newCustomer2.
	newCustomer := newCustomer2.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:08:58' prior: 50625659!
addAndPersistCustomerFrom: aCustomerData 

	| newCustomer2 |
	newCustomer2  := Customer new.
	newCustomer2 firstName: aCustomerData second.
	newCustomer2 lastName: aCustomerData third.
	newCustomer2 identificationType: aCustomerData fourth.
	newCustomer2 identificationNumber: aCustomerData fifth.
	
	session persist: newCustomer2.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:09:10' prior: 50625674!
addAndPersistCustomerFrom: aCustomerData 

	newCustomer  := Customer new.
	newCustomer firstName: aCustomerData second.
	newCustomer lastName: aCustomerData third.
	newCustomer identificationType: aCustomerData fourth.
	newCustomer identificationNumber: aCustomerData fifth.
	
	session persist: newCustomer.! !

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:09:12'!
PASSED!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IC&VW 6/26/2023 20:15:21' prior: 50625647 overrides: 16902254!
value

	"
	self importCustomers
	"
	 

	[ line := readStream nextLine. ] whileNotNil: [
		data := line findTokens: $,.
		(self isCustomerLine) ifTrue: [ 	self addAndPersistCustomerFrom: data.].
		(self isAddressLine) ifTrue: [ self addAddressFrom: data to: newCustomer].
	].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'IC&VW 6/26/2023 20:15:21'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'line session readStream newCustomer data'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:15:26' prior: 50625705 overrides: 16902254!
value

	"
	self importCustomers
	"

	[ line := readStream nextLine. ] whileNotNil: [
		data := line findTokens: $,.
		(self isCustomerLine) ifTrue: [ 	self addAndPersistCustomerFrom: data.].
		(self isAddressLine) ifTrue: [ self addAddressFrom: data to: newCustomer].
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:15:31' prior: 50625727 overrides: 16902254!
value

	[ line := readStream nextLine. ] whileNotNil: [
		data := line findTokens: $,.
		(self isCustomerLine) ifTrue: [ 	self addAndPersistCustomerFrom: data.].
		(self isAddressLine) ifTrue: [ self addAddressFrom: data to: newCustomer].
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:15:44'!
createRecord

	^ data := line findTokens: $,! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:15:44' prior: 50625740 overrides: 16902254!
value

	[ line := readStream nextLine. ] whileNotNil: [
		self createRecord.
		(self isCustomerLine) ifTrue: [ 	self addAndPersistCustomerFrom: data.].
		(self isAddressLine) ifTrue: [ self addAddressFrom: data to: newCustomer].
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:16:18' prior: 50625688!
addAndPersistCustomerFrom: aCustomerData 

	newCustomer  := Customer new.
	newCustomer firstName: data second.
	newCustomer lastName: data third.
	newCustomer identificationType: data fourth.
	newCustomer identificationNumber: data fifth.
	
	session persist: newCustomer.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:16:24'!
addAndPersistCustomerFrom 

	newCustomer  := Customer new.
	newCustomer firstName: data second.
	newCustomer lastName: data third.
	newCustomer identificationType: data fourth.
	newCustomer identificationNumber: data fifth.
	
	session persist: newCustomer.! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IC&VW 6/26/2023 20:16:24' prior: 50625757 overrides: 16902254!
value

	[ line := readStream nextLine. ] whileNotNil: [
		self createRecord.
		(self isCustomerLine) ifTrue: [ 	self addAndPersistCustomerFrom.].
		(self isAddressLine) ifTrue: [ self addAddressFrom: data to: newCustomer].
	].

	! !

!methodRemoval: CustomerImporter #addAndPersistCustomerFrom: stamp: 'IC&VW 6/26/2023 20:16:24'!
addAndPersistCustomerFrom: aCustomerData 

	newCustomer  := Customer new.
	newCustomer firstName: data second.
	newCustomer lastName: data third.
	newCustomer identificationType: data fourth.
	newCustomer identificationNumber: data fifth.
	
	session persist: newCustomer.!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:16:44' prior: 50625245!
addAddressFrom: dataa to: aCustomer

	| newAddress |
	newAddress := Address new.
	aCustomer addAddress: newAddress.
	newAddress streetName: data second.
	newAddress streetNumber: data third asNumber .
	newAddress town: data fourth.
	newAddress zipCode: data fifth asNumber .
	newAddress province: data sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:16:52'!
to: aCustomer

	| newAddress |
	newAddress := Address new.
	aCustomer addAddress: newAddress.
	newAddress streetName: data second.
	newAddress streetNumber: data third asNumber .
	newAddress town: data fourth.
	newAddress zipCode: data fifth asNumber .
	newAddress province: data sixth! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IC&VW 6/26/2023 20:16:52' prior: 50625792 overrides: 16902254!
value

	[ line := readStream nextLine. ] whileNotNil: [
		self createRecord.
		(self isCustomerLine) ifTrue: [ 	self addAndPersistCustomerFrom.].
		(self isAddressLine) ifTrue: [ self to: newCustomer].
	].

	! !

!methodRemoval: CustomerImporter #addAddressFrom:to: stamp: 'IC&VW 6/26/2023 20:16:52'!
addAddressFrom: dataa to: aCustomer

	| newAddress |
	newAddress := Address new.
	aCustomer addAddress: newAddress.
	newAddress streetName: data second.
	newAddress streetNumber: data third asNumber .
	newAddress town: data fourth.
	newAddress zipCode: data fifth asNumber .
	newAddress province: data sixth!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:17:12'!
addAddressTo: aCustomer

	| newAddress |
	newAddress := Address new.
	aCustomer addAddress: newAddress.
	newAddress streetName: data second.
	newAddress streetNumber: data third asNumber .
	newAddress town: data fourth.
	newAddress zipCode: data fifth asNumber .
	newAddress province: data sixth! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IC&VW 6/26/2023 20:17:12' prior: 50625840 overrides: 16902254!
value

	[ line := readStream nextLine. ] whileNotNil: [
		self createRecord.
		(self isCustomerLine) ifTrue: [ 	self addAndPersistCustomerFrom.].
		(self isAddressLine) ifTrue: [ self addAddressTo: newCustomer].
	].

	! !

!methodRemoval: CustomerImporter #to: stamp: 'IC&VW 6/26/2023 20:17:12'!
to: aCustomer

	| newAddress |
	newAddress := Address new.
	aCustomer addAddress: newAddress.
	newAddress streetName: data second.
	newAddress streetNumber: data third asNumber .
	newAddress town: data fourth.
	newAddress zipCode: data fifth asNumber .
	newAddress province: data sixth!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:17:38' prior: 50625862!
addAddressTo: aCustomer

	| newAddress |
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: data second.
	newAddress streetNumber: data third asNumber .
	newAddress town: data fourth.
	newAddress zipCode: data fifth asNumber .
	newAddress province: data sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:17:45'!
addAddressTo

	| newAddress |
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: data second.
	newAddress streetNumber: data third asNumber .
	newAddress town: data fourth.
	newAddress zipCode: data fifth asNumber .
	newAddress province: data sixth! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IC&VW 6/26/2023 20:17:45' prior: 50625876 overrides: 16902254!
value

	[ line := readStream nextLine. ] whileNotNil: [
		self createRecord.
		(self isCustomerLine) ifTrue: [ 	self addAndPersistCustomerFrom.].
		(self isAddressLine) ifTrue: [ self addAddressTo].
	].

	! !

!methodRemoval: CustomerImporter #addAddressTo: stamp: 'IC&VW 6/26/2023 20:17:45'!
addAddressTo: aCustomer

	| newAddress |
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: data second.
	newAddress streetNumber: data third asNumber .
	newAddress town: data fourth.
	newAddress zipCode: data fifth asNumber .
	newAddress province: data sixth!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:17:53'!
addAddress

	| newAddress |
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: data second.
	newAddress streetNumber: data third asNumber .
	newAddress town: data fourth.
	newAddress zipCode: data fifth asNumber .
	newAddress province: data sixth! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IC&VW 6/26/2023 20:17:53' prior: 50625923 overrides: 16902254!
value

	[ line := readStream nextLine. ] whileNotNil: [
		self createRecord.
		(self isCustomerLine) ifTrue: [ 	self addAndPersistCustomerFrom.].
		(self isAddressLine) ifTrue: [ self addAddress].
	].

	! !

!methodRemoval: CustomerImporter #addAddressTo stamp: 'IC&VW 6/26/2023 20:17:53'!
addAddressTo

	| newAddress |
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: data second.
	newAddress streetNumber: data third asNumber .
	newAddress town: data fourth.
	newAddress zipCode: data fifth asNumber .
	newAddress province: data sixth!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:18:14'!
importRecord

	(self isCustomerLine) ifTrue: [ 	self addAndPersistCustomerFrom.].
		(self isAddressLine) ifTrue: [ self addAddress]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:18:14' prior: 50625957 overrides: 16902254!
value

	[ line := readStream nextLine. ] whileNotNil: [
		self createRecord.
		self importRecord.
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:18:20' prior: 50625978!
importRecord

	(self isCustomerLine) ifTrue: [ 	self addAndPersistCustomerFrom.].
	(self isAddressLine) ifTrue: [ self addAddress]! !

----SNAPSHOT----(26 June 2023 20:19:34) CuisUniversity-5832.image priorSource: 9398567!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:23:11'!
hasLinesLeft

	^ line := readStream nextLine! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:23:11' prior: 50625986 overrides: 16902254!
value

	[ self hasLinesLeft. ] whileNotNil: [
		self createRecord.
		self importRecord.
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:23:23' prior: 50626009 overrides: 16902254!
value

	[ self hasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:23:37' prior: 50626003!
hasLinesLeft

	line := readStream nextLine
	^ line notNil.! !

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:23:42'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:23:42'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:23:53' prior: 50626022!
hasLinesLeft

	line := readStream nextLine.
	^ line notNil.! !

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:23:55'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 20:34:59'!
test02ImportFromEmptyString! !
!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 20:35:48' prior: 50624380!
test01Import

	CustomerImporter valueFrom: self validImportData into: session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 20:36:01' prior: 50626039!
test02ImportFromEmptyString
	
	CustomerImporter valueFrom: self emptyImportData into: session.! !
!ImportTest methodsFor: 'test data' stamp: 'IC&VW 6/26/2023 20:36:17'!
emptyImportData

	^ ReadStream on: ''! !
!ImportTest methodsFor: 'test data' stamp: 'IC&VW 6/26/2023 20:36:33' prior: 50624483!
validImportData

	^ ReadStream on:'C,Pepe,Sanchez,D,22333444
					A,San Martin,3322,Olivos,1636,BsAs
					A,Maipu,888,Florida,1122,Buenos Aires
					C,Juan,Perez,C,23-25666777-9
					A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:36:35'!
FAILURE!

!testRun: #ImportTest #test02ImportFromEmptyString stamp: 'IC&VW 6/26/2023 20:36:35'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:36:35'!
FAILURE!

!testRun: #ImportTest #test02ImportFromEmptyString stamp: 'IC&VW 6/26/2023 20:37:03'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:37:03'!
FAILURE!

!testRun: #ImportTest #test02ImportFromEmptyString stamp: 'IC&VW 6/26/2023 20:37:03'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:37:03'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:37:09'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:37:09'!
FAILURE!
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 18:08:08' prior: 50626063!
validImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:37:31'!
PASSED!

!testRun: #ImportTest #test02ImportFromEmptyString stamp: 'IC&VW 6/26/2023 20:37:31'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 20:39:31' prior: 50626053!
test02ImportFromEmptyString
	
	self should: [CustomerImporter valueFrom: self emptyImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: 'No importaste nada crack'].
	! !

!testRun: #ImportTest #test02ImportFromEmptyString stamp: 'IC&VW 6/26/2023 20:39:32'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:40:42' prior: 50626016 overrides: 16902254!
value
	self hasLinesLeft ifFalse: [self class emptyStreamError].
	[ self hasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:40:45'!
ERROR!

!testRun: #ImportTest #test02ImportFromEmptyString stamp: 'IC&VW 6/26/2023 20:40:45'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:40:47'!
ERROR!
!CustomerImporter class methodsFor: 'importing' stamp: 'IC&VW 6/26/2023 20:41:40'!
emptyStreamError
	self error: self emptyStreamErrorMessage.! !
!CustomerImporter class methodsFor: 'importing' stamp: 'IC&VW 6/26/2023 20:41:55'!
emptyStreamErrorMessage
	'No se importo nada crack'! !
!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 20:42:20' prior: 50626112!
test02ImportFromEmptyString
	
	self should: [CustomerImporter valueFrom: self emptyImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter emptyStreamErrorMessage].
	! !

!testRun: #ImportTest #test02ImportFromEmptyString stamp: 'IC&VW 6/26/2023 20:42:21'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:42:21'!
ERROR!

!testRun: #ImportTest #test02ImportFromEmptyString stamp: 'IC&VW 6/26/2023 20:42:21'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:42:21'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 20:42:30' prior: 50626152!
test02ImportFromEmptyString
	
	self should: [CustomerImporter valueFrom: self emptyImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter emptyStreamErrorMessage ].
	! !
!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 20:42:36' prior: 50626174!
test02ImportFromEmptyString
	
	self should: [CustomerImporter valueFrom: self emptyImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: (anError messageText) equals: CustomerImporter emptyStreamErrorMessage ].
	! !

!testRun: #ImportTest #test02ImportFromEmptyString stamp: 'IC&VW 6/26/2023 20:42:37'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:42:37'!
ERROR!

!testRun: #ImportTest #test02ImportFromEmptyString stamp: 'IC&VW 6/26/2023 20:42:37'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:42:37'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 20:42:44' prior: 50626185!
test02ImportFromEmptyString
	
	self should: [CustomerImporter valueFrom: self emptyImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter emptyStreamErrorMessage ].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:44:31' prior: 50626126 overrides: 16902254!
value
	self hasLinesLeft ifFalse: [self class emptyStreamError].
	[ self hasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:44:34' prior: 50626219 overrides: 16902254!
value
	self hasLinesLeft ifFalse: [^self class emptyStreamError].
	[ self hasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:44:35'!
ERROR!

!testRun: #ImportTest #test02ImportFromEmptyString stamp: 'IC&VW 6/26/2023 20:44:35'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:44:35'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:44:40' prior: 50626228 overrides: 16902254!
value
	self hasLinesLeft ifFalse: [self class emptyStreamError].
	[ self hasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:45:45'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:46:07'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:46:57'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 18:08:08' prior: 50626097!
validImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test02ImportFromEmptyString stamp: 'IC&VW 6/26/2023 20:47:55'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:47:58'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:47:58'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:49:02' prior: 50626032!
hasLinesLeft
	^ line notNil.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:49:15' prior: 50626245 overrides: 16902254!
value
	self hasLinesLeft ifFalse: [self class emptyStreamError].
	[ 	line := readStream nextLine.
		self hasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:49:31'!
getNextLine

	line := readStream nextLine.
		self hasLinesLeft! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:49:31' prior: 50626282 overrides: 16902254!
value
	self hasLinesLeft ifFalse: [self class emptyStreamError].
	[ 	self getNextLine ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:49:34' prior: 50626297 overrides: 16902254!
value
	self hasLinesLeft ifFalse: [self class emptyStreamError].
	[ self getNextLine ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:49:35'!
ERROR!

!testRun: #ImportTest #test02ImportFromEmptyString stamp: 'IC&VW 6/26/2023 20:49:35'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:49:35'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:49:35'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:49:45'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:49:45'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:49:45'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:50:02' prior: 50626291!
getNextLine

	line := readStream nextLine.
	^self hasLinesLeft.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:50:17'!
getNextLineAndHasLinesLeft

	line := readStream nextLine.
	^self hasLinesLeft.! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IC&VW 6/26/2023 20:50:17' prior: 50626306 overrides: 16902254!
value
	self hasLinesLeft ifFalse: [self class emptyStreamError].
	[ self getNextLineAndHasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !

!methodRemoval: CustomerImporter #getNextLine stamp: 'IC&VW 6/26/2023 20:50:17'!
getNextLine

	line := readStream nextLine.
	^self hasLinesLeft.!

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:50:19'!
ERROR!

!testRun: #ImportTest #test02ImportFromEmptyString stamp: 'IC&VW 6/26/2023 20:50:19'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:50:19'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:50:19'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 20:51:13'!
test01ImportFromValidStream

	CustomerImporter valueFrom: self validImportData into: session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !

!methodRemoval: ImportTest #test01Import stamp: 'IC&VW 6/26/2023 20:51:13'!
test01Import

	CustomerImporter valueFrom: self validImportData into: session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly !
!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 20:51:19'!
test02ImportFromEmptyStream
	
	self should: [CustomerImporter valueFrom: self emptyImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter emptyStreamErrorMessage ].
	! !

!methodRemoval: ImportTest #test02ImportFromEmptyString stamp: 'IC&VW 6/26/2023 20:51:19'!
test02ImportFromEmptyString
	
	self should: [CustomerImporter valueFrom: self emptyImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter emptyStreamErrorMessage ].
	!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 20:51:24'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:54:00' prior: 50626344 overrides: 16902254!
value
	[readStream nextLine] ifNil: [self class emptyStreamError].
	[ self getNextLineAndHasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 20:54:02'!
PASSED!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 20:54:03'!
FAILURE!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 20:54:03'!
FAILURE!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 20:54:20'!
FAILURE!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 20:54:20'!
FAILURE!

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 20:54:29'!
PASSED!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 20:54:35'!
FAILURE!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 20:54:35'!
FAILURE!

readStream nextLine!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:55:39' prior: 50626411 overrides: 16902254!
value
	[^readStream nextLine] ifNil: [self class emptyStreamError].
	[ self getNextLineAndHasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:55:40' prior: 50626445 overrides: 16902254!
value
	[readStream nextLine] ifNil: [self class emptyStreamError].
	[ self getNextLineAndHasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:56:19' prior: 50626454 overrides: 16902254!
value
	[readStream nextLine isNil ] ifTrue: [self class emptyStreamError].
	[ self getNextLineAndHasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 20:56:39'!
ERROR!

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 20:56:39'!
ERROR!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 20:56:43'!
FAILURE!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 20:56:43'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:57:39' prior: 50626463 overrides: 16902254!
value
	[readStream nextLine] ifNil: [self class emptyStreamError].
	[ self getNextLineAndHasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 20:57:46'!
PASSED!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 20:57:51'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:58:59' prior: 50626484 overrides: 16902254!
value
	readStream nextLine ifNil: [self class emptyStreamError].
	[ self getNextLineAndHasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 20:59:04'!
ERROR!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 20:59:04'!
PASSED!

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 20:59:04'!
ERROR!

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 20:59:16'!
ERROR!

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 20:59:16'!
ERROR!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 20:59:20'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 20:59:45' prior: 50626499 overrides: 16902254!
value
	"readStream nextLine ifNil: [self class emptyStreamError]."
	[ self getNextLineAndHasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:00:58' prior: 50626526 overrides: 16902254!
value
	readStream isEmpty ifTrue: [self class emptyStreamError].
	[ self getNextLineAndHasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:01:10' prior: 50626535 overrides: 16902254!
value
	[readStream isEmpty] ifTrue: [self class emptyStreamError].
	[ self getNextLineAndHasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 21:01:11'!
ERROR!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:01:11'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:01:22' prior: 50626544 overrides: 16902254!
value
	[readStream isEmpty] ifTrue: [^self class emptyStreamError].
	[ self getNextLineAndHasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 21:01:23'!
ERROR!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:01:23'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:01:28' prior: 50626559 overrides: 16902254!
value
	[readStream isEmpty] ifTrue: [self class emptyStreamError].
	[ self getNextLineAndHasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:01:35' prior: 50626574 overrides: 16902254!
value
	"[readStream isEmpty] ifTrue: [self class emptyStreamError]."
	[ self getNextLineAndHasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !
!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 21:01:58'!
test03ImportFromStreamWithInvalidPrefix
	
	self should: [CustomerImporter valueFrom: self emptyImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter emptyStreamErrorMessage ].
	! !
!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 21:02:11' prior: 50626591!
test03ImportFromStreamWithInvalidPrefix
	
	self should: [CustomerImporter valueFrom: self invalidPrefixImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter emptyStreamErrorMessage ].
	! !
!ImportTest methodsFor: 'test data' stamp: 'IC&VW 6/26/2023 21:02:22'!
invalidPrefixImportData

	^ ReadStream on:
'V,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'IC&VW 6/26/2023 21:02:29'!
FAILURE!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'IC&VW 6/26/2023 21:02:29'!
FAILURE!
!ImportTest methodsFor: 'test data' stamp: 'IC&VW 6/26/2023 21:02:49' prior: 50626613!
invalidPrefixImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
V,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 21:02:51'!
PASSED!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:02:52'!
FAILURE!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'IC&VW 6/26/2023 21:02:52'!
FAILURE!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'IC&VW 6/26/2023 21:02:57'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 21:03:31' prior: 50626602!
test03ImportFromStreamWithInvalidPrefix
	
	self should: [CustomerImporter valueFrom: self invalidPrefixImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter streamWithInvalidPrefixErrorMessage ].
	! !
!CustomerImporter class methodsFor: 'importing' stamp: 'IC&VW 6/26/2023 21:03:42'!
streamWithInvalidPrefixErrorMessage
	self error: self streamWithInvalidPrefixErrorMessageMessage.! !

!methodRemoval: CustomerImporter class #streamWithInvalidPrefixErrorMessage stamp: 'IC&VW 6/26/2023 21:03:53'!
streamWithInvalidPrefixErrorMessage
	self error: self streamWithInvalidPrefixErrorMessageMessage.!
!CustomerImporter class methodsFor: 'importing' stamp: 'IC&VW 6/26/2023 21:04:03'!
streamWithInvalidPrefixError
	self error: self streamWithInvalidPrefixErrorMessage.! !
!CustomerImporter class methodsFor: 'importing' stamp: 'IC&VW 6/26/2023 21:04:21'!
streamWithInvalidPrefixErrorMessage
	'No podes arrancar con el pie izquierdo'! !

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 21:04:23'!
PASSED!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:04:23'!
FAILURE!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'IC&VW 6/26/2023 21:04:23'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:05:27' prior: 50625993!
importRecord

	(self isCustomerLine) ifTrue: [ ^	self addAndPersistCustomerFrom.].
	(self isAddressLine) ifTrue: [ ^self addAddress].
	self class streamWithInvalidPrefixError.! !

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 21:05:28'!
PASSED!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:05:29'!
FAILURE!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'IC&VW 6/26/2023 21:05:29'!
PASSED!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:05:29'!
FAILURE!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'IC&VW 6/26/2023 21:05:38'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 21:06:05'!
test04ImportFromStreamWithDoubleValidPrefix
	
	self should: [CustomerImporter valueFrom: self invalidPrefixImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter streamWithInvalidPrefixErrorMessage ].
	! !
!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 21:06:28' prior: 50626721!
test04ImportFromStreamWithDoubleValidPrefix
	
	self should: [CustomerImporter valueFrom: self doubleValidPrefixImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter streamWithDoubleValidPrefixErrorMessage ].
	! !
!CustomerImporter class methodsFor: 'importing' stamp: 'IC&VW 6/26/2023 21:06:45'!
streamWithDoubleValidPrefixErrorMessage
	'No podes arrancar con AAAAAAAAAAA'! !
!CustomerImporter class methodsFor: 'importing' stamp: 'IC&VW 6/26/2023 21:06:58'!
streamWithDoubleValidPrefixError
	self error: self streamWithDoubleValidPrefixErrorMessage.! !
!ImportTest methodsFor: 'test data' stamp: 'IC&VW 6/26/2023 21:07:21'!
doubleValidPrefixImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
AA,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:08:15' prior: 50625542!
isAddressLine

	^ line first = 'A'! !

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 21:08:16'!
ERROR!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:08:16'!
FAILURE!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'IC&VW 6/26/2023 21:08:16'!
PASSED!

!testRun: #ImportTest #test04ImportFromStreamWithDoubleValidPrefix stamp: 'IC&VW 6/26/2023 21:08:16'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:09:00' prior: 50625570!
isCustomerLine

	^ line first =  'C'! !

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 21:09:02'!
ERROR!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:09:02'!
FAILURE!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'IC&VW 6/26/2023 21:09:02'!
PASSED!

!testRun: #ImportTest #test04ImportFromStreamWithDoubleValidPrefix stamp: 'IC&VW 6/26/2023 21:09:02'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 21:09:20' prior: 50626386!
test02ImportFromEmptyStream
	
	"self should: [CustomerImporter valueFrom: self emptyImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter emptyStreamErrorMessage ]."
	! !

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:09:21'!
PASSED!

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 21:09:21'!
ERROR!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:09:21'!
PASSED!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'IC&VW 6/26/2023 21:09:21'!
PASSED!

!testRun: #ImportTest #test04ImportFromStreamWithDoubleValidPrefix stamp: 'IC&VW 6/26/2023 21:09:21'!
PASSED!

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 21:09:21'!
ERROR!

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 21:09:21'!
ERROR!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:09:29'!
PASSED!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'IC&VW 6/26/2023 21:09:31'!
PASSED!

!testRun: #ImportTest #test04ImportFromStreamWithDoubleValidPrefix stamp: 'IC&VW 6/26/2023 21:09:32'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:10:51' prior: 50626784!
isCustomerLine

	^ data first =  'C'! !

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 21:10:53'!
ERROR!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:10:53'!
PASSED!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'IC&VW 6/26/2023 21:10:53'!
PASSED!

!testRun: #ImportTest #test04ImportFromStreamWithDoubleValidPrefix stamp: 'IC&VW 6/26/2023 21:10:53'!
PASSED!

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 21:10:53'!
ERROR!

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 21:10:53'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:11:12' prior: 50626767!
isAddressLine

	^ data first = 'A'! !

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 21:11:25'!
PASSED!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:11:25'!
PASSED!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'IC&VW 6/26/2023 21:11:26'!
PASSED!

!testRun: #ImportTest #test04ImportFromStreamWithDoubleValidPrefix stamp: 'IC&VW 6/26/2023 21:11:26'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 21:12:51'!
test05ImportFromStreamWithAddressForNoCustomer
	
	self should: [CustomerImporter valueFrom: self addressForNoCustomerImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter streamWithaddressForNoCustomerErrorMessage ].
	! !
!ImportTest methodsFor: 'test data' stamp: 'IC&VW 6/26/2023 21:13:11'!
addressForNoCustomerImportData

	^ ReadStream on:
'A,San Martin,3322,Olivos,1636,BsAs
C,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 21:13:35' prior: 50626884!
test05ImportFromStreamWithAddressForNoCustomer
	
	self should: [CustomerImporter valueFrom: self addressForNoCustomerImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter streamWithAddressForNoCustomerErrorMessage ].
	! !
!CustomerImporter class methodsFor: 'importing' stamp: 'IC&VW 6/26/2023 21:13:51'!
streamWithAddressForNoCustomerErrorMessage
	'No podes arrancar con una direcc capo'! !
!CustomerImporter class methodsFor: 'importing' stamp: 'IC&VW 6/26/2023 21:13:58'!
streamWithAddressForNoCustomerError
	self error: self streamWithAddressForNoCustomerErrorMessage.! !

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 21:13:59'!
PASSED!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:14:00'!
PASSED!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'IC&VW 6/26/2023 21:14:00'!
PASSED!

!testRun: #ImportTest #test04ImportFromStreamWithDoubleValidPrefix stamp: 'IC&VW 6/26/2023 21:14:00'!
PASSED!

!testRun: #ImportTest #test05ImportFromStreamWithAddressForNoCustomer stamp: 'IC&VW 6/26/2023 21:14:00'!
FAILURE!

!testRun: #ImportTest #test05ImportFromStreamWithAddressForNoCustomer stamp: 'IC&VW 6/26/2023 21:14:00'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:15:03' prior: 50625944!
addAddress

	| newAddress |

	newCustomer ifNil: [self class streamWithAddressForNoCustomerError ].
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: data second.
	newAddress streetNumber: data third asNumber .
	newAddress town: data fourth.
	newAddress zipCode: data fifth asNumber .
	newAddress province: data sixth! !

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 21:15:04'!
PASSED!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:15:05'!
PASSED!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'IC&VW 6/26/2023 21:15:05'!
PASSED!

!testRun: #ImportTest #test04ImportFromStreamWithDoubleValidPrefix stamp: 'IC&VW 6/26/2023 21:15:05'!
PASSED!

!testRun: #ImportTest #test05ImportFromStreamWithAddressForNoCustomer stamp: 'IC&VW 6/26/2023 21:15:05'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 21:16:18'!
test06ImportFromStreamWithCustomerWithLessFields
	
	self should: [CustomerImporter valueFrom: self streamWithcustomerWithLessFieldsImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter streamWithAddressForNoCustomerErrorMessage ].
	! !
!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 21:16:35' prior: 50626980!
test06ImportFromStreamWithCustomerWithLessFields
	
	self should: [CustomerImporter valueFrom: self streamWithcustomerWithLessFieldsImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter streamWithCustomerWithLessFieldsErrorMessage ].
	! !
!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 21:16:52' prior: 50626993!
test06ImportFromStreamWithCustomerWithLessFields
	
	self should: [CustomerImporter valueFrom: self customerWithLessFieldsImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter streamWithCustomerWithLessFieldsErrorMessage ].
	! !
!ImportTest methodsFor: 'test data' stamp: 'IC&VW 6/26/2023 21:17:15'!
customerWithLessFieldsImportData

	^ ReadStream on:
'C,Pepe,,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!CustomerImporter class methodsFor: 'importing' stamp: 'IC&VW 6/26/2023 21:17:53'!
streamWithCustomerWithLessFieldsErrorMessage
	'No podes importar a un chabon sin poner todos sus datos, preguntale si no sabes su apellido'! !
!CustomerImporter class methodsFor: 'importing' stamp: 'IC&VW 6/26/2023 21:18:05'!
streamWithCustomerWithLessFieldsError
	self error: self streamWithCustomerWithLessFieldsErrorMessage.! !

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 21:18:11'!
PASSED!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:18:11'!
PASSED!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'IC&VW 6/26/2023 21:18:11'!
PASSED!

!testRun: #ImportTest #test04ImportFromStreamWithDoubleValidPrefix stamp: 'IC&VW 6/26/2023 21:18:11'!
PASSED!

!testRun: #ImportTest #test05ImportFromStreamWithAddressForNoCustomer stamp: 'IC&VW 6/26/2023 21:18:11'!
PASSED!

!testRun: #ImportTest #test06ImportFromStreamWithCustomerWithLessFields stamp: 'IC&VW 6/26/2023 21:18:11'!
FAILURE!

!testRun: #ImportTest #test06ImportFromStreamWithCustomerWithLessFields stamp: 'IC&VW 6/26/2023 21:18:11'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:18:38'!
addAndPersistCustomer 

	newCustomer  := Customer new.
	newCustomer firstName: data second.
	newCustomer lastName: data third.
	newCustomer identificationType: data fourth.
	newCustomer identificationNumber: data fifth.
	
	session persist: newCustomer.! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IC&VW 6/26/2023 21:18:38' prior: 50626697!
importRecord

	(self isCustomerLine) ifTrue: [ ^	self addAndPersistCustomer.].
	(self isAddressLine) ifTrue: [ ^self addAddress].
	self class streamWithInvalidPrefixError.! !

!methodRemoval: CustomerImporter #addAndPersistCustomerFrom stamp: 'IC&VW 6/26/2023 21:18:38'!
addAndPersistCustomerFrom 

	newCustomer  := Customer new.
	newCustomer firstName: data second.
	newCustomer lastName: data third.
	newCustomer identificationType: data fourth.
	newCustomer identificationNumber: data fifth.
	
	session persist: newCustomer.!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:18:50'!
isAddressData

	^ data first = 'A'! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IC&VW 6/26/2023 21:18:50' prior: 50627077!
importRecord

	(self isCustomerLine) ifTrue: [ ^	self addAndPersistCustomer.].
	(self isAddressData) ifTrue: [ ^self addAddress].
	self class streamWithInvalidPrefixError.! !

!methodRemoval: CustomerImporter #isAddressLine stamp: 'IC&VW 6/26/2023 21:18:50'!
isAddressLine

	^ data first = 'A'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:18:57'!
isCustomerData

	^ data first =  'C'! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IC&VW 6/26/2023 21:18:57' prior: 50627101!
importRecord

	(self isCustomerData) ifTrue: [ ^	self addAndPersistCustomer.].
	(self isAddressData) ifTrue: [ ^self addAddress].
	self class streamWithInvalidPrefixError.! !

!methodRemoval: CustomerImporter #isCustomerLine stamp: 'IC&VW 6/26/2023 21:18:57'!
isCustomerLine

	^ data first =  'C'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:20:55' prior: 50627065!
addAndPersistCustomer 

	(data size < 5) ifTrue: [self class streamWithCustomerWithLessFieldsError].
	newCustomer  := Customer new.
	newCustomer firstName: data second.
	newCustomer lastName: data third.
	newCustomer identificationType: data fourth.
	newCustomer identificationNumber: data fifth.
	
	session persist: newCustomer.! !

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 21:20:58'!
PASSED!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:20:58'!
PASSED!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'IC&VW 6/26/2023 21:20:58'!
PASSED!

!testRun: #ImportTest #test04ImportFromStreamWithDoubleValidPrefix stamp: 'IC&VW 6/26/2023 21:20:58'!
PASSED!

!testRun: #ImportTest #test05ImportFromStreamWithAddressForNoCustomer stamp: 'IC&VW 6/26/2023 21:20:58'!
PASSED!

!testRun: #ImportTest #test06ImportFromStreamWithCustomerWithLessFields stamp: 'IC&VW 6/26/2023 21:20:58'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 21:21:37'!
test07ImportFromStreamWithCustomerWithMoreFields
	
	self should: [CustomerImporter valueFrom: self customerWithMoreFieldsImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter streamWithCustomerWithMoreFieldsErrorMessage ].
	! !
!ImportTest methodsFor: 'test data' stamp: 'IC&VW 6/26/2023 21:22:13'!
customerWithMoreFieldsImportData

	^ ReadStream on:
'C,Pepe,Sanchez,A+,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!CustomerImporter class methodsFor: 'importing' stamp: 'IC&VW 6/26/2023 21:23:52'!
streamWithCustomerWithMoreFieldsErrorMessage
	'No podes me importa su tipo de sangre, no vienen a donar nada'! !
!CustomerImporter class methodsFor: 'importing' stamp: 'IC&VW 6/26/2023 21:24:04'!
streamWithCustomerWithMoreFieldsError
	self error: self streamWithCustomerWithMoreFieldsErrorMessage.! !

!testRun: #ImportTest #test07ImportFromStreamWithCustomerWithMoreFields stamp: 'IC&VW 6/26/2023 21:24:22'!
FAILURE!

!testRun: #ImportTest #test07ImportFromStreamWithCustomerWithMoreFields stamp: 'IC&VW 6/26/2023 21:24:23'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:24:50' prior: 50627131!
addAndPersistCustomer 

	(data size < 5) ifTrue: [self class streamWithCustomerWithLessFieldsError].
	(data size > 5) ifTrue: [self class streamWithCustomerWithMoreFieldsError].
	newCustomer  := Customer new.
	newCustomer firstName: data second.
	newCustomer lastName: data third.
	newCustomer identificationType: data fourth.
	newCustomer identificationNumber: data fifth.
	
	session persist: newCustomer.! !

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 21:24:52'!
PASSED!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:24:52'!
PASSED!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'IC&VW 6/26/2023 21:24:52'!
PASSED!

!testRun: #ImportTest #test04ImportFromStreamWithDoubleValidPrefix stamp: 'IC&VW 6/26/2023 21:24:52'!
PASSED!

!testRun: #ImportTest #test05ImportFromStreamWithAddressForNoCustomer stamp: 'IC&VW 6/26/2023 21:24:52'!
PASSED!

!testRun: #ImportTest #test06ImportFromStreamWithCustomerWithLessFields stamp: 'IC&VW 6/26/2023 21:24:52'!
PASSED!

!testRun: #ImportTest #test07ImportFromStreamWithCustomerWithMoreFields stamp: 'IC&VW 6/26/2023 21:24:52'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:25:07' prior: 50627207!
addAndPersistCustomer 

	(data size = 5) ifFalse: [self class streamWithCustomerWithLessFieldsError].
	newCustomer  := Customer new.
	newCustomer firstName: data second.
	newCustomer lastName: data third.
	newCustomer identificationType: data fourth.
	newCustomer identificationNumber: data fifth.
	
	session persist: newCustomer.! !

!methodRemoval: CustomerImporter class #streamWithCustomerWithMoreFieldsError stamp: 'IC&VW 6/26/2023 21:25:13'!
streamWithCustomerWithMoreFieldsError
	self error: self streamWithCustomerWithMoreFieldsErrorMessage.!

!methodRemoval: CustomerImporter class #streamWithCustomerWithMoreFieldsErrorMessage stamp: 'IC&VW 6/26/2023 21:25:28'!
streamWithCustomerWithMoreFieldsErrorMessage
	'No podes me importa su tipo de sangre, no vienen a donar nada'!
!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 21:25:34' prior: 50627164!
test07ImportFromStreamWithCustomerWithMoreFields
	
	self should: [CustomerImporter valueFrom: self customerWithMoreFieldsImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter streamWithCustomerWithLessFieldsErrorMessage ].
	! !
!CustomerImporter class methodsFor: 'importing' stamp: 'IC&VW 6/26/2023 21:26:05'!
streamWithCustomerWithInvalidAmountOfFieldsErrorMessage
	'No podes importar a un chabon sin poner todos sus datos, preguntale si no sabes su apellido'! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'IC&VW 6/26/2023 21:26:05' prior: 50627035!
streamWithCustomerWithLessFieldsError
	self error: self streamWithCustomerWithInvalidAmountOfFieldsErrorMessage.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'IC&VW 6/26/2023 21:26:05' prior: 50627006!
test06ImportFromStreamWithCustomerWithLessFields
	
	self should: [CustomerImporter valueFrom: self customerWithLessFieldsImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter streamWithCustomerWithInvalidAmountOfFieldsErrorMessage ].
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'IC&VW 6/26/2023 21:26:05' prior: 50627275!
test07ImportFromStreamWithCustomerWithMoreFields
	
	self should: [CustomerImporter valueFrom: self customerWithMoreFieldsImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter streamWithCustomerWithInvalidAmountOfFieldsErrorMessage ].
	! !

!methodRemoval: CustomerImporter class #streamWithCustomerWithLessFieldsErrorMessage stamp: 'IC&VW 6/26/2023 21:26:05'!
streamWithCustomerWithLessFieldsErrorMessage
	'No podes importar a un chabon sin poner todos sus datos, preguntale si no sabes su apellido'!
!CustomerImporter class methodsFor: 'importing' stamp: 'IC&VW 6/26/2023 21:26:19' prior: 50627288!
streamWithCustomerWithInvalidAmountOfFieldsErrorMessage
	'No podes importar a un chabon con otra cantidad de fields'! !
!CustomerImporter class methodsFor: 'importing' stamp: 'IC&VW 6/26/2023 21:26:34'!
streamWithCustomerWithInvalidAmountOfFieldsError
	self error: self streamWithCustomerWithInvalidAmountOfFieldsErrorMessage.! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'IC&VW 6/26/2023 21:26:34' prior: 50627247!
addAndPersistCustomer 

	(data size = 5) ifFalse: [self class streamWithCustomerWithInvalidAmountOfFieldsError].
	newCustomer  := Customer new.
	newCustomer firstName: data second.
	newCustomer lastName: data third.
	newCustomer identificationType: data fourth.
	newCustomer identificationNumber: data fifth.
	
	session persist: newCustomer.! !

!methodRemoval: CustomerImporter class #streamWithCustomerWithLessFieldsError stamp: 'IC&VW 6/26/2023 21:26:34'!
streamWithCustomerWithLessFieldsError
	self error: self streamWithCustomerWithInvalidAmountOfFieldsErrorMessage.!

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 21:26:38'!
PASSED!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:26:38'!
PASSED!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'IC&VW 6/26/2023 21:26:38'!
PASSED!

!testRun: #ImportTest #test04ImportFromStreamWithDoubleValidPrefix stamp: 'IC&VW 6/26/2023 21:26:39'!
PASSED!

!testRun: #ImportTest #test05ImportFromStreamWithAddressForNoCustomer stamp: 'IC&VW 6/26/2023 21:26:39'!
PASSED!

!testRun: #ImportTest #test06ImportFromStreamWithCustomerWithLessFields stamp: 'IC&VW 6/26/2023 21:26:39'!
PASSED!

!testRun: #ImportTest #test07ImportFromStreamWithCustomerWithMoreFields stamp: 'IC&VW 6/26/2023 21:26:39'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 21:27:29'!
test08ImportFromStreamWithAddressWithInvalidAmountOfFields
	
	self should: [CustomerImporter valueFrom: self addressWithLessFieldsImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter streamWithAddressWithInvalidAmountOfFieldsErrorMessage ].
	! !
!CustomerImporter class methodsFor: 'importing' stamp: 'IC&VW 6/26/2023 21:27:44'!
streamWithAddressWithInvalidAmountOfFieldsErrorMessage
	'No podes importar a una direcc con otra cantidad de fields'! !
!CustomerImporter class methodsFor: 'importing' stamp: 'IC&VW 6/26/2023 21:27:55'!
streamWithAddressWithInvalidAmountOfFieldsError
	self error: self streamWithAddressWithInvalidAmountOfFieldsErrorMessage.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:29:03' prior: 50626950!
addAddress

	| newAddress |
	(data size = 6) ifFalse: [self class streamWithAddressWithInvalidAmountOfFieldsError ].
	newCustomer ifNil: [self class streamWithAddressForNoCustomerError ].
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: data second.
	newAddress streetNumber: data third asNumber .
	newAddress town: data fourth.
	newAddress zipCode: data fifth asNumber .
	newAddress province: data sixth! !

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 21:29:04'!
PASSED!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:29:04'!
PASSED!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'IC&VW 6/26/2023 21:29:04'!
PASSED!

!testRun: #ImportTest #test04ImportFromStreamWithDoubleValidPrefix stamp: 'IC&VW 6/26/2023 21:29:05'!
PASSED!

!testRun: #ImportTest #test05ImportFromStreamWithAddressForNoCustomer stamp: 'IC&VW 6/26/2023 21:29:05'!
PASSED!

!testRun: #ImportTest #test06ImportFromStreamWithCustomerWithLessFields stamp: 'IC&VW 6/26/2023 21:29:05'!
PASSED!

!testRun: #ImportTest #test07ImportFromStreamWithCustomerWithMoreFields stamp: 'IC&VW 6/26/2023 21:29:05'!
PASSED!

!testRun: #ImportTest #test08ImportFromStreamWithAddressWithInvalidAmountOfFields stamp: 'IC&VW 6/26/2023 21:29:05'!
FAILURE!

!testRun: #ImportTest #test08ImportFromStreamWithAddressWithInvalidAmountOfFields stamp: 'IC&VW 6/26/2023 21:29:05'!
FAILURE!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:29:18'!
PASSED!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'IC&VW 6/26/2023 21:29:19'!
PASSED!

!testRun: #ImportTest #test08ImportFromStreamWithAddressWithInvalidAmountOfFields stamp: 'IC&VW 6/26/2023 21:29:22'!
FAILURE!

!testRun: #ImportTest #test08ImportFromStreamWithAddressWithInvalidAmountOfFields stamp: 'IC&VW 6/26/2023 21:29:22'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 21:29:38' prior: 50627398!
test08ImportFromStreamWithAddressWithInvalidAmountOfFields
	
	self should: [CustomerImporter valueFrom: self addressWithLessFieldsImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter streamWithAddressWithInvalidAmountOfFieldsErrorMessage ].
	! !
!ImportTest methodsFor: 'test data' stamp: 'IC&VW 6/26/2023 21:29:51'!
addressWithLessFieldsImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 21:29:52'!
PASSED!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:29:52'!
PASSED!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'IC&VW 6/26/2023 21:29:53'!
PASSED!

!testRun: #ImportTest #test04ImportFromStreamWithDoubleValidPrefix stamp: 'IC&VW 6/26/2023 21:29:53'!
PASSED!

!testRun: #ImportTest #test05ImportFromStreamWithAddressForNoCustomer stamp: 'IC&VW 6/26/2023 21:29:53'!
PASSED!

!testRun: #ImportTest #test06ImportFromStreamWithCustomerWithLessFields stamp: 'IC&VW 6/26/2023 21:29:53'!
PASSED!

!testRun: #ImportTest #test07ImportFromStreamWithCustomerWithMoreFields stamp: 'IC&VW 6/26/2023 21:29:53'!
PASSED!

!testRun: #ImportTest #test08ImportFromStreamWithAddressWithInvalidAmountOfFields stamp: 'IC&VW 6/26/2023 21:29:53'!
FAILURE!

!testRun: #ImportTest #test08ImportFromStreamWithAddressWithInvalidAmountOfFields stamp: 'IC&VW 6/26/2023 21:29:53'!
FAILURE!
!ImportTest methodsFor: 'test data' stamp: 'IC&VW 6/26/2023 21:30:11' prior: 50627501!
addressWithLessFieldsImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,Mi Casa,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 21:30:13'!
PASSED!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:30:13'!
PASSED!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'IC&VW 6/26/2023 21:30:13'!
PASSED!

!testRun: #ImportTest #test04ImportFromStreamWithDoubleValidPrefix stamp: 'IC&VW 6/26/2023 21:30:14'!
PASSED!

!testRun: #ImportTest #test05ImportFromStreamWithAddressForNoCustomer stamp: 'IC&VW 6/26/2023 21:30:14'!
PASSED!

!testRun: #ImportTest #test06ImportFromStreamWithCustomerWithLessFields stamp: 'IC&VW 6/26/2023 21:30:14'!
PASSED!

!testRun: #ImportTest #test07ImportFromStreamWithCustomerWithMoreFields stamp: 'IC&VW 6/26/2023 21:30:14'!
PASSED!

!testRun: #ImportTest #test08ImportFromStreamWithAddressWithInvalidAmountOfFields stamp: 'IC&VW 6/26/2023 21:30:14'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 21:30:49' prior: 50626801!
test02ImportFromEmptyStream
	
	self should: [CustomerImporter valueFrom: self emptyImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter emptyStreamErrorMessage ].
	! !

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:31:48'!
FAILURE!

----SNAPSHOT----(26 June 2023 21:32:06) CuisUniversity-5832.image priorSource: 9419173!

readStream isEmpty !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:32:56' prior: 50626583 overrides: 16902254!
value
	[readStream isEmpty] ifTrue: [self class emptyStreamError].
	[ self getNextLineAndHasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:33:46' prior: 50627597 overrides: 16902254!
value

	[readStream isEmpty] ifTrue: [self class emptyStreamError].
	[ self getNextLineAndHasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:34:59'!
FAILURE!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:34:59'!
FAILURE!

(self from: aReadStream into: aSession)!

----STARTUP---- (26 June 2023 21:36:34) as /home/valewodka/Downloads/linux64/CuisUniversity-5832.image!

!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 21:36:46' prior: 50627579!
test02ImportFromEmptyStream
	
	! !

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:36:47'!
PASSED!

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 21:36:48'!
PASSED!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:36:48'!
PASSED!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'IC&VW 6/26/2023 21:36:48'!
PASSED!

!testRun: #ImportTest #test04ImportFromStreamWithDoubleValidPrefix stamp: 'IC&VW 6/26/2023 21:36:49'!
PASSED!

!testRun: #ImportTest #test05ImportFromStreamWithAddressForNoCustomer stamp: 'IC&VW 6/26/2023 21:36:49'!
PASSED!

!testRun: #ImportTest #test06ImportFromStreamWithCustomerWithLessFields stamp: 'IC&VW 6/26/2023 21:36:49'!
PASSED!

!testRun: #ImportTest #test07ImportFromStreamWithCustomerWithMoreFields stamp: 'IC&VW 6/26/2023 21:36:49'!
PASSED!

!testRun: #ImportTest #test08ImportFromStreamWithAddressWithInvalidAmountOfFields stamp: 'IC&VW 6/26/2023 21:36:49'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 21:37:01' prior: 50627599!
test02ImportFromEmptyStream
	
	self should: [CustomerImporter valueFrom: self emptyImportData into: session.] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomerImporter emptyStreamErrorMessage ].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:37:31' prior: 50626583 overrides: 16902254!
value
	
	
	[readStream isEmpty] ifTrue: [self class emptyStreamError].
	[ self getNextLineAndHasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:37:35' prior: 50627646 overrides: 16902254!
value
	
	
	[readStream isEmpty] ifTrue: [self class emptyStreamError].
	[ self getNextLineAndHasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:37:45'!
FAILURE!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:38:03'!
FAILURE!

----STARTUP---- (26 June 2023 21:38:24) as /home/valewodka/Downloads/linux64/CuisUniversity-5832.image!

!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:38:44' prior: 50626583 overrides: 16902254!
value
	
	[readStream isEmpty] ifTrue: [self class emptyStreamError].
	[ self getNextLineAndHasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:39:38' prior: 50627600 overrides: 16902254!
value
	
	"[readStream isEmpty] ifTrue: [self class emptyStreamError]."
	[ self getNextLineAndHasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:42:04'!
FAILURE!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:42:04'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:42:58' prior: 50627609 overrides: 16902254!
value
	
	[readStream isEmpty] ifTrue: [self class emptyStreamError].
	[ self getNextLineAndHasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:43:24'!
checkStreamIsEmpty

	^ readStream isEmpty! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:43:24' prior: 50627624 overrides: 16902254!
value
	
	[self checkStreamIsEmpty] ifTrue: [self class emptyStreamError].
	[ self getNextLineAndHasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:43:32' prior: 50627637 overrides: 16902254!
value
	
	self checkStreamIsEmpty.
	[ self getNextLineAndHasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:44:02' prior: 50627632!
checkStreamIsEmpty

	^ [readStream isEmpty] ifTrue: [self class emptyStreamError]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:45:07' prior: 50627655!
checkStreamIsEmpty

	^ [readStream isEmpty] ifTrue: [self error: 'a']! !

!methodRemoval: CustomerImporter #hasLinesLeft stamp: 'IC&VW 6/26/2023 21:46:58'!
hasLinesLeft
	^ line notNil.!
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:46:58' prior: 50626337!
getNextLineAndHasLinesLeft

	line := readStream nextLine.
	^ line notNil.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'IC&VW 6/26/2023 21:50:09' prior: 50627647 overrides: 16902254!
value
	
	"self checkStreamIsEmpty."
	[ self getNextLineAndHasLinesLeft ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !
!ImportTest methodsFor: 'tests' stamp: 'IC&VW 6/26/2023 21:51:17' prior: 50627579!
test02ImportFromEmptyStream
	
	CustomerImporter valueFrom: self emptyImportData into: session.
	self assert: self noCustomersImported
	! !

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:51:26'!
ERROR!
!ImportTest methodsFor: 'assertions' stamp: 'IC&VW 6/26/2023 21:51:38'!
noCustomersImported
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'assertions' stamp: 'IC&VW 6/26/2023 21:51:45' prior: 50627693!
noCustomersImported
	
	^true! !

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:51:46'!
PASSED!

!testRun: #ImportTest #test01ImportFromValidStream stamp: 'IC&VW 6/26/2023 21:51:47'!
PASSED!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:51:47'!
PASSED!

!testRun: #ImportTest #test03ImportFromStreamWithInvalidPrefix stamp: 'IC&VW 6/26/2023 21:51:47'!
PASSED!

!testRun: #ImportTest #test04ImportFromStreamWithDoubleValidPrefix stamp: 'IC&VW 6/26/2023 21:51:47'!
PASSED!

!testRun: #ImportTest #test05ImportFromStreamWithAddressForNoCustomer stamp: 'IC&VW 6/26/2023 21:51:47'!
PASSED!

!testRun: #ImportTest #test06ImportFromStreamWithCustomerWithLessFields stamp: 'IC&VW 6/26/2023 21:51:47'!
PASSED!

!testRun: #ImportTest #test07ImportFromStreamWithCustomerWithMoreFields stamp: 'IC&VW 6/26/2023 21:51:47'!
PASSED!

!testRun: #ImportTest #test08ImportFromStreamWithAddressWithInvalidAmountOfFields stamp: 'IC&VW 6/26/2023 21:51:47'!
PASSED!
!ImportTest methodsFor: 'assertions' stamp: 'IC&VW 6/26/2023 21:52:02'!
assertNoCustomersImported
	
	^true! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'IC&VW 6/26/2023 21:52:02' prior: 50627683!
test02ImportFromEmptyStream
	
	CustomerImporter valueFrom: self emptyImportData into: session.
	self assert: self assertNoCustomersImported
	! !

!methodRemoval: ImportTest #noCustomersImported stamp: 'IC&VW 6/26/2023 21:52:02'!
noCustomersImported
	
	^true!

!testRun: #ImportTest #test02ImportFromEmptyStream stamp: 'IC&VW 6/26/2023 21:52:11'!
PASSED!

----SNAPSHOT----(26 June 2023 21:52:26) CuisUniversity-5832.image priorSource: 9470135!
!ImportTest methodsFor: 'assertions' stamp: 'IC&VW 6/26/2023 21:52:49'!
assertNoCustomersWasImported
	
	^true! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'IC&VW 6/26/2023 21:52:49' prior: 50627737!
test02ImportFromEmptyStream
	
	CustomerImporter valueFrom: self emptyImportData into: session.
	self assert: self assertNoCustomersWasImported
	! !

!methodRemoval: ImportTest #assertNoCustomersImported stamp: 'IC&VW 6/26/2023 21:52:49'!
assertNoCustomersImported
	
	^true!

----SNAPSHOT----(26 June 2023 21:52:51) CuisUniversity-5832.image priorSource: 9475201!

----SNAPSHOT----(26 June 2023 21:53:03) CuisUniversity-5832.image priorSource: 9475825!